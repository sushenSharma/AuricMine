{"version":3,"file":"static/js/176.94801a61.chunk.js","mappings":"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","sources":["components/SwalNotification/index.js","config/index_supabase.js","containers/Main/Ledgers/LedgerProducts/lib/api.js","containers/Main/Ledgers/LedgerHeader/index.js","containers/Main/Ledgers/LedgerProducts/hooks.js","utils/validation.js","containers/Main/Ledgers/LedgerProducts/ledger-validations.js","containers/Main/Ledgers/LedgerProducts/LPListing/TableActions/index.js","containers/Main/Ledgers/LedgerProducts/LPListing/index.js","containers/Main/Ledgers/LedgerProducts/LPListing/lp-listing-utils.js","containers/Main/Ledgers/LedgerProducts/index.js","containers/Main/Ledgers/LedgerProducts/ledger-products-utils.js","containers/Main/Ledgers/LedgerInsights/index.js","components/ModalContainer/index.js","containers/Main/Ledgers/index.js","utils/defaults.js","utils/metadata.js","hooks/use-labels.js","ui-kit/Buttons/LedgerButton/index.js"],"sourcesContent":["import Swal from \"sweetalert2\";\n\nconst SwalNotification = ({ title, text, btnLabel, iconType }) => {\n  return Swal.fire({\n    title,\n    text,\n    icon: iconType,\n    confirmButtonText: btnLabel,\n  });\n};\n\nexport default SwalNotification;\n","import { createClient } from \"@supabase/supabase-js\";\n\nexport const supabase = createClient(\n  process.env.REACT_APP_SUPABASE_URL,\n  process.env.REACT_APP_SUPABASE_ANON_KEY\n);\n\nexport const openAIConfig = {\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  apiUrl: process.env.REACT_APP_OPENAI_URL,\n  promptText: process.env.REACT_APP_OPENAI_API_PROMPT,\n};\n\nexport const tableName = process.env.REACT_APP_SUPABASE_TABLE_NAME;\nexport const watchlistTableName =\n  process.env.REACT_APP_SUPABASE_WATCHLIST_TABLE_NAME;\nexport const stateTableName = process.env.REACT_APP_SUPABASE_STATUS_TABLE_NAME;\n","import {\n  supabase,\n  tableName,\n  openAIConfig,\n  watchlistTableName,\n  stateTableName,\n} from \"../../../../../config/index_supabase\";\n\nexport const fetchUserLedgerData = async (userId) => {\n  return await supabase\n    .from(tableName)\n    .select()\n    .eq(\"user_id\", userId)\n    .order(\"buy_date\", { ascending: true });\n};\n\nexport const postUserLedgerData = async (formData) => {\n  return await supabase.from(tableName).insert(formData);\n};\n\nexport const deleteUserLedgerData = async (dataID) => {\n  return await supabase.from(tableName).delete().match({ id: dataID });\n};\n\nexport const updateUserLedgerData = async (dataID, updateData) => {\n  return await supabase\n    .from(tableName)\n    .update(updateData)\n    .match({ id: dataID });\n};\n\nexport const fetchInsightsWithAI = async (formData) => {\n  const requestBody = {\n    messages: [\n      {\n        role: \"system\",\n        content: `With json data ${JSON.stringify(formData)}, ${\n          openAIConfig.promptText\n        }`,\n      },\n    ],\n    max_tokens: Math.min(formData.length, 1000),\n    temperature: 0.7, // Adjust the temperature as needed\n    frequency_penalty: 0, // Adjust the frequency penalty as needed\n    presence_penalty: 0, // Adjust the presence penalty as needed\n    top_p: 0.95, // Adjust top_p as needed\n    stop: null, // Set stop to null or any specific stop sequence if needed\n  };\n\n  const response = await fetch(openAIConfig.apiUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"api-key\": openAIConfig.apiKey,\n      \"Cache-Control\": \"no-cache\",\n    },\n    body: JSON.stringify(requestBody),\n  });\n\n  const data = await response.json();\n\n  // Extract the content from the response\n  const text = data.choices[0].message.content\n    .split(\"\\n\")\n    .map((line) => line.trim());\n\n  return text;\n};\n\nexport const postWatchListData = async (formData) => {\n\n  return await supabase.from(watchlistTableName).insert(formData);\n};\n\nexport const fetchWatchlistData = async (userId) => {\n  try {\n    const { data, error } = await supabase\n      .from(watchlistTableName)\n      .select(\"*\") // Specify the columns you want to fetch\n      .eq(\"userUUID\", userId); // Ensure the filter is applied based on the userUUID\n\n    if (error) {\n      console.error(\"Error fetching watchlist data:\", error);\n      return { data: null, error };\n    }\n\n    return { data, error: null };\n  } catch (err) {\n    console.error(\"Unexpected error fetching watchlist data:\", err);\n    return { data: null, error: err };\n  }\n};\n\n\n\nexport const updateCardStatus = async (taskId, newStatus) => {\n  try {\n    const { error } = await supabase\n      .from(watchlistTableName) // Replace \"watchlist\" with your actual table name\n      .update({ status: newStatus }) // Update the status field\n      .eq(\"id\", taskId); // Match the card by its id\n\n    if (error) {\n      console.error(\"Error updating status in database:\", error);\n      return { success: false, error };\n    }\n\n    return { success: true };\n  } catch (err) {\n    console.error(\"Unexpected error updating status:\", err);\n    return { success: false, error: err };\n  }\n};\n\n","import React from \"react\";\nimport { getLabel } from \"../../../../hooks/use-labels\";\n\nimport AI from \"@mui/icons-material/AutoFixHighOutlined\";\nimport Download from \"@mui/icons-material/DownloadOutlined\";\nimport AddNewRow from \"@mui/icons-material/AddToPhotosOutlined\";\nimport LedgerButton from \"../../../../ui-kit/Buttons/LedgerButton\";\n\nconst LedgerHeader = ({ table, getInsights, disabled }) => {\n  return (\n    <div className=\"ledger-header-container\">\n      <LedgerButton\n        label={getLabel(\"getInsightsLabel\")}\n        type=\"outlined\"\n        variant=\"contained\"\n        className=\"ledger-buttons get-insights\"\n        onClick={() => !disabled && getInsights()}\n        hoverType=\"success-color\"\n        size=\"md\"\n        disable={disabled}\n        icon={<AI></AI>}\n      />\n\n      <LedgerButton\n        type=\"outlined\"\n        variant=\"contained\"\n        className=\"ledger-buttons create-row\"\n        onClick={() => {\n          table.setCreatingRow(true);\n        }}\n        label={getLabel(\"insertNewRowLabel\")}\n        size=\"md\"\n        icon={<AddNewRow></AddNewRow>}\n      />\n\n      <LedgerButton\n        label={getLabel(\"downloadCSVLabel\")}\n        type=\"outlined\"\n        variant=\"contained\"\n        className=\"ledger-buttons download-csv\"\n        onClick={() => console.log(\"download-csv\")}\n        hoverType=\"primary-color\"\n        size=\"md\"\n        icon={<Download></Download>}\n        style={{ marginLeft: \"auto\" }}\n      />\n    </div>\n  );\n};\n\nexport default LedgerHeader;\n","const totalPercentageRate =\n  0.001 + 0.0000325 + 0.00000001 + 0.18 * (0.0000325 + 0.00000001) + 0.00015;\n\nexport const getSubmissionData = (fieldData, userUUID) => {\n  return [\n    {\n      stock_name: fieldData.stockSymbol,\n      buy_price: parseFloat(fieldData.buyPrice),\n      buy_date: fieldData.buyDate,\n      quantity: parseFloat(fieldData.quantity),\n      sell_price: parseFloat(fieldData.sellPrice),\n      sell_date: fieldData.sellDate,\n      brokerage: parseFloat(setBrokerage(fieldData)).toFixed(2),\n      days_hold: setHoldDays(fieldData),\n      reason_to_buy: fieldData.reasonToBuy,\n      gtt_enabled: fieldData.gttEnabled,\n      profit_loss: setProfitLoss(fieldData),\n      roce: parseFloat(setRoce(fieldData)).toFixed(2),\n      annual_return_generated: parseFloat(fieldData.annualReturnGenerated),\n      Amount: setAmountInvested(fieldData),\n      user_id: userUUID,\n    },\n  ];\n};\n\nconst setProfitLoss = (fieldData) => {\n  const { quantity, sellPrice, buyPrice } = fieldData;\n\n  const sellQty = sellPrice * quantity;\n  const buyQty = buyPrice * quantity;\n\n  const profitLoss = (sellQty - buyQty).toFixed(2);\n\n  return profitLoss;\n};\n\nconst setAmountInvested = (fieldData) => {\n  const { buyPrice, quantity } = fieldData;\n  const buyQty = buyPrice * quantity;\n\n  return buyQty.toFixed(2);\n};\n\nconst setRoce = (fieldData) => {\n  return (setProfitLoss(fieldData) / setAmountInvested(fieldData)) * 100;\n};\n\nconst setBrokerage = (fieldData) => {\n  const { buyPrice, quantity, sellPrice } = fieldData;\n  const buyQty = buyPrice * quantity;\n  const sellQty = sellPrice * quantity;\n\n  return buyQty * totalPercentageRate + sellQty * totalPercentageRate + 15.93;\n};\n\nconst setHoldDays = (fieldData) => {\n  const { buyDate, sellDate } = fieldData;\n\n  const buy = new Date(buyDate);\n  const sell = new Date(sellDate);\n\n  const diffTime = Math.abs(sell - buy);\n\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n  return diffDays;\n};\n","export const errorMessage = {\n  stockSymbol: \"Stock name is Required\",\n  buyPrice: \"Buying price is Required\",\n  buyDate: \"Buy date is Required\",\n  quantity: \"Quantity is Require\",\n  sellPrice: \"Sell price is Require\",\n  sellDate: \"Sell date is Required\",\n  brokerage: \"Brokerage is Required\",\n  daysHold: \"Days hold is Required\",\n  reasonToBuy: \"Reason to buy is Required\",\n  gttEnabled: \"GTT enabled is Required\",\n  profitLoss: \"Profit Loss is Required\",\n  amount: \"Amount is Required\",\n  annualReturnGenerated: \"Annual Return Generated is Required\",\n  roce: \"Roce is Required\",\n  lessSellDate: \"Sell date cannot be less than buy date.\",\n};\n","import { errorMessage } from \"../../../../utils/validation\";\n\nconst validateRequired = (value) => !!value.length;\n\nexport const ledgerProdcutValidation = (product) => {\n  return {\n    stockSymbol:\n      !validateRequired(product.stockSymbol) && errorMessage.stockSymbol,\n    buyPrice: !validateRequired(product.buyPrice) && errorMessage.buyPrice,\n    buyDate: !validateRequired(product.buyDate) && errorMessage.buyDate,\n    quantity: !validateRequired(product.quantity) && errorMessage.quantity,\n    sellPrice: !validateRequired(product.sellPrice) && errorMessage.sellPrice,\n    sellDate: !validateRequired(product.sellDate) && errorMessage.sellDate,\n    reasonToBuy:\n      !validateRequired(product.reasonToBuy) && errorMessage.reasonToBuy,\n    gttEnabled:\n      !validateRequired(product.gttEnabled) && errorMessage.gttEnabled,\n  };\n};\n\nexport const dateValidations = ({ buy_date, sell_date }) => {\n  const buyDate = new Date(buy_date);\n  const sellDate = new Date(sell_date);\n\n  if (buyDate > sellDate) {\n    return false;\n  }\n\n  return true;\n};\n","import React from \"react\";\nimport { Box, IconButton, Tooltip } from \"@mui/material\";\n\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nconst TableActions = ({ table, row, openModal }) => {\n  return (\n    <Box sx={{ display: \"flex\", gap: \"1rem\" }}>\n      <Tooltip title=\"Edit\">\n        <IconButton onClick={() => table.setEditingRow(row)} color=\"success\">\n          <EditIcon />\n        </IconButton>\n      </Tooltip>\n      <Tooltip title=\"Delete\">\n        <IconButton color=\"error\" onClick={() => openModal(row)}>\n          <DeleteIcon />\n        </IconButton>\n      </Tooltip>\n    </Box>\n  );\n};\n\nexport default TableActions;\n","import _ from \"lodash\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { prepareLedgerColumns } from \"./lp-listing-utils\";\nimport { getLabel } from \"../../../../../hooks/use-labels\";\nimport { errorMessage } from \"../../../../../utils/validation\";\nimport { ledgerProdcutValidation } from \"../ledger-validations\";\nimport {\n  MaterialReactTable,\n  useMaterialReactTable,\n} from \"material-react-table\";\n\nimport Swal from \"sweetalert2\";\nimport TableActions from \"./TableActions\";\n\nconst LPListing = ({\n  items,\n  onSubmit,\n  onDelete,\n  onEdit,\n  invalidSellDate,\n  sellDateFocused,\n  tableAction,\n}) => {\n  const [errors, setErrors] = useState({});\n  const [columnNames, setColumnNames] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (invalidSellDate) {\n      setErrors({\n        ...errors,\n        sellDate: errorMessage.lessSellDate,\n      });\n    }\n  }, [invalidSellDate, errors]);\n\n  useEffect(() => {\n    if (_.isEmpty(columnNames)) {\n      setLoading(true);\n\n      tableColumns(errors);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [columnNames, errors]);\n\n  useEffect(() => {\n    if (!_.isEmpty(errors)) {\n      tableColumns(errors);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [errors]);\n\n  const onColumnFocusHandler = (validationErrors, focusedColumn = \"\") => {\n    setErrors({\n      ...validationErrors,\n    });\n\n    if (focusedColumn === \"sellDate\" && invalidSellDate) {\n      sellDateFocused();\n      setErrors({\n        ...validationErrors,\n        sellDate: undefined,\n      });\n    }\n  };\n\n  const tableColumns = (validationErrors) => {\n    const preparedColumns = prepareLedgerColumns(\n      validationErrors,\n      onColumnFocusHandler\n    );\n    setColumnNames(preparedColumns);\n    setLoading(false);\n  };\n\n  const columns = useMemo(() => columnNames, [columnNames]);\n\n  const handleCreateProduct = (values, table) => {\n    const newValidationErrors = ledgerProdcutValidation(values);\n    if (Object.values(newValidationErrors).some((error) => error)) {\n      setErrors(newValidationErrors);\n      return;\n    }\n    setErrors({});\n    onSubmit(values, \"insert\", table);\n  };\n\n  const openDeleteConfirmModal = (row) => {\n    Swal.fire({\n      title: getLabel(\"areYouSureLabel\"),\n      text: getLabel(\"cannotRevertLabel\"),\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: getLabel(\"deleteLabel\"),\n    }).then((result) => {\n      if (result.isConfirmed) {\n        const { id } = row;\n        onDelete(id);\n      }\n    });\n  };\n\n  const table = useMaterialReactTable({\n    columns,\n    data: items,\n    enableColumnOrdering: true,\n    createDisplayMode: \"row\",\n    editDisplayMode: \"row\",\n    enableEditing: true,\n    initialState: {\n      density: \"compact\",\n      columnPinning: { left: [\"stockSymbol\"] },\n    },\n    getRowId: (row) => row.id,\n    muiTableContainerProps: {\n      sx: {\n        border: \"1px solid rgba(81, 81, 81, .5)\",\n      },\n    },\n    //Table Column names\n    muiTableHeadCellProps: {\n      sx: {\n        color: \"white\",\n        backgroundColor: \"#403d3d\",\n        minWidth: \"50px\",\n        alignContent: \"center\",\n      },\n    },\n    muiColumnActionsButtonProps: {\n      sx: {\n        color: \"white\",\n        borderRight: \"2px solid white\",\n        borderRadius: \"0\",\n      },\n    },\n\n    //Actual Content of table\n    muiTableBodyCellProps: {\n      sx: {\n        border: \"3\",\n        backgroundColor: \"#d0d5db\",\n        color: \"#000000\",\n      },\n    },\n    //Top Right corner buttons like search, density\n    muiTopToolbarProps: {\n      sx: {\n        backgroundColor: \"#000000\",\n        color: \"#fff\",\n        \"& .MuiIconButton-root\": {\n          color: \"white\",\n        },\n      },\n    },\n    muiBottomToolbarProps: {\n      className: \"custom-footer\",\n      sx: {\n        backgroundColor: \"#000000\",\n        color: \"#fff\",\n        \"& .MuiIconButton-root,.MuiBox-root label, .MuiBox-root div,.MuiSvgIcon-root\":\n          {\n            color: \"white\",\n          },\n      },\n    },\n\n    onActionCellChange: () => console.log(\"1\"),\n    onCreatingRowCancel: () => setErrors({}),\n    onCreatingRowSave: ({ values, table }) =>\n      handleCreateProduct(values, table),\n    onEditingRowCancel: () => setErrors({}),\n    onEditingRowSave: ({ values, table }) => onEdit(values, \"update\", table),\n    renderRowActions: ({ row, table }) => (\n      <TableActions\n        table={table}\n        row={row}\n        openModal={openDeleteConfirmModal}\n      />\n    ),\n    renderTopToolbarCustomActions: ({ table }) => tableAction(table),\n  });\n\n  if (loading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"ledger-product-listing-container\">\n      <MaterialReactTable table={table} />\n    </div>\n  );\n};\n\nexport default LPListing;\n","export const prepareLedgerColumns = (validationErrors, onColumnFocus) => {\n  return [\n    {\n      accessorKey: \"stockSymbol\",\n      header: \"Stock Symbol\",\n      muiEditTextFieldProps: {\n        type: \"string\",\n        required: true,\n        error: !!validationErrors?.stockSymbol,\n        helperText: validationErrors?.stockSymbol,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            stockSymbol: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"buyPrice\",\n      header: \"Buy Price\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        required: true,\n        inputProps: { min: 0 },\n        error: !!validationErrors?.buyPrice,\n        helperText: validationErrors?.buyPrice,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            buyPrice: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"buyDate\",\n      header: \"Buy Date\",\n      muiEditTextFieldProps: {\n        type: \"date\",\n        required: true,\n        error: !!validationErrors?.buyDate,\n        helperText: validationErrors?.buyDate,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            buyDate: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"quantity\",\n      header: \"Quantity\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        required: true,\n        inputProps: { min: 0 },\n        error: !!validationErrors?.quantity,\n        helperText: validationErrors?.quantity,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            quantity: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"reasonToBuy\",\n      header: \"Reason to Buy\",\n      muiEditTextFieldProps: {\n        type: \"string\",\n        required: true,\n        error: !!validationErrors?.reasonToBuy,\n        helperText: validationErrors?.reasonToBuy,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            reasonToBuy: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"sellPrice\",\n      header: \"Sell Price\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        required: true,\n        inputProps: { min: 0 },\n        error: !!validationErrors?.sellPrice,\n        helperText: validationErrors?.sellPrice,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            sellPrice: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"sellDate\",\n      header: \"Sell Date\",\n      muiEditTextFieldProps: {\n        type: \"date\",\n        required: true,\n        error: !!validationErrors?.sellDate,\n        helperText: validationErrors?.sellDate,\n        onFocus: () =>\n          onColumnFocus(\n            {\n              ...validationErrors,\n              sellDate: undefined,\n            },\n            \"sellDate\"\n          ),\n      },\n    },\n\n    {\n      accessorKey: \"gttEnabled\",\n      header: \"GTT Enabled\",\n      editVariant: \"select\",\n      editSelectOptions: [\"YES\", \"NO\"],\n      muiEditTextFieldProps: {\n        select: true,\n        error: !!validationErrors?.gttEnabled,\n        helperText: validationErrors?.gttEnabled,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            gttEnabled: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"brokerage\",\n      header: \"Brokerage\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"daysHold\",\n      header: \"Days Hold\",\n      muiEditTextFieldProps: {\n        type: \"string\",\n        disabled: true,\n      },\n    },\n\n    {\n      accessorKey: \"profitLoss\",\n      header: \"Profit / Loss\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"amount\",\n      header: \"Amount Invested\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"annualReturnGenerated\",\n      header: \"Annual Return Generated\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"roce\",\n      header: \"Roce\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"id\",\n      header: \"ID\",\n      enableEditing: false,\n      size: 80,\n    },\n  ];\n};\n","import _ from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { userIdKey } from \"../../../../constants.js\";\nimport { getSubmissionData } from \"./hooks.js\";\nimport { useSelector } from \"react-redux\";\nimport { getLabel } from \"../../../../hooks/use-labels.js\";\nimport { dateValidations } from \"./ledger-validations.js\";\nimport { prepareUserLedgerData } from \"./ledger-products-utils.js\";\nimport { getStorageStringItem } from \"../../../../utils/common-utils.js\";\nimport {\n  deleteUserLedgerData,\n  fetchUserLedgerData,\n  postUserLedgerData,\n  updateUserLedgerData,\n} from \"./lib/api.js\";\n\nimport LPListing from \"./LPListing\";\n\nimport SwalNotification from \"../../../../components/SwalNotification/index.js\";\n\nconst LedgerProducts = ({ tableAction, getUserData }) => {\n  const user_uuid = getStorageStringItem(userIdKey);\n  const [productList, setProductList] = useState([]);\n  const { userUUID } = useSelector((state) => state.public);\n  const [validSellDate, setValidSellDate] = useState(false);\n\n  const [userID, setUserID] = useState(\"\");\n\n  useEffect(() => {\n    if (userUUID || user_uuid) setUserID(userUUID || user_uuid);\n  }, [userUUID, user_uuid]);\n\n  useEffect(() => {\n    if (userID) getLedgerProductList(userID, getUserData);\n  }, [userID, getUserData]);\n\n  const getLedgerProductList = async (userID, getUserData) => {\n    fetchUserLedgerData(userID).then(({ data, error }) => {\n      if (error) {\n        console.log(error);\n        return;\n      }\n\n      getUserData(JSON.stringify(data));\n      const preparedData = prepareUserLedgerData(data);\n      setProductList(preparedData);\n    });\n  };\n  const onDeleteHandler = async (dataID) => {\n    try {\n      await deleteUserLedgerData(dataID);\n      setProductList((currentList) =>\n        currentList.filter((item) => item.id !== dataID)\n      );\n\n      SwalNotification({\n        title: getLabel(\"successLabel\"),\n        text: getLabel(\"deleteDateContent\"),\n        iconType: \"success\",\n        btnLabel: getLabel(\"okLabel\"),\n      });\n    } catch (error) {\n      console.error(\"Error deleting data:\", error);\n    }\n  };\n\n  const onFinishHandler = (values, action, table) => {\n    const { id } = values;\n    const rowData = getSubmissionData(values, user_uuid);\n\n    if (!_.isEmpty(rowData)) {\n      action === \"insert\" && onSubmit(rowData, table);\n      action === \"update\" && onUpdate(id, rowData, table);\n    }\n  };\n\n  const onSubmit = async (rowData, table) => {\n    const valid = dateValidations(rowData[0]);\n\n    if (valid) {\n      postUserLedgerData(rowData)\n        .then((response) => {\n          table.setCreatingRow(null);\n          getLedgerProductList(userID, getUserData);\n\n          SwalNotification({\n            title: getLabel(\"successLabel\"),\n            text: getLabel(\"saveDataContent\"),\n            iconType: \"success\",\n            btnLabel: getLabel(\"okLabel\"),\n          });\n        })\n        .catch((error) => console.error);\n    } else {\n      setValidSellDate(true);\n    }\n  };\n\n  const onUpdate = (dataID, updatedData, table) => {\n    const valid = dateValidations(updatedData[0]);\n\n    if (valid) {\n      updateUserLedgerData(dataID, updatedData)\n        .then((response) => {\n          getLedgerProductList(userID, getUserData);\n          table.setEditingRow(null);\n\n          SwalNotification({\n            title: getLabel(\"successLabel\"),\n            text: getLabel(\"saveDataContent\"),\n            iconType: \"success\",\n            btnLabel: getLabel(\"okLabel\"),\n          });\n        })\n        .catch((error) => {\n          console.error(\"Error updating data:\", error);\n        });\n    } else {\n      setValidSellDate(true);\n    }\n  };\n\n  return (\n    <div className=\"ledger-products-container\">\n      <LPListing\n        items={productList}\n        onSubmit={onFinishHandler}\n        onDelete={onDeleteHandler}\n        onEdit={onFinishHandler}\n        invalidSellDate={validSellDate}\n        sellDateFocused={() => setValidSellDate(false)}\n        tableAction={tableAction}\n      />\n    </div>\n  );\n};\n\nexport default LedgerProducts;\n","export const prepareUserLedgerData = (data) => {\n  return data.map((item) => {\n    return {\n      id: item.id,\n      stockSymbol: item.stock_name,\n      buyPrice: item.buy_price,\n      buyDate: item.buy_date,\n      quantity: item.quantity,\n      sellPrice: item.sell_price,\n      sellDate: item.sell_date,\n      brokerage: item.brokerage,\n      daysHold: item.days_hold,\n      reasonToBuy: item.reason_to_buy,\n      gttEnabled: item.gtt_enabled,\n      profitLoss: item.profit_loss,\n      amount: item.Amount,\n      annualReturnGenerated: item.annual_return_generated,\n      roce: item.roce,\n    };\n  });\n};\n","import React from \"react\";\n\nconst LedgerInsights = ({ textList }) => {\n  return (\n    <div className=\"insights-list-container\">\n      <div className=\"title\">AI Generated Insights</div>\n      <ul>\n        {textList.map((text, index) =>\n          text.length ? <li key={index}>{text}</li> : null\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default LedgerInsights;\n","import Modal from \"@mui/material/Modal\";\n\nimport \"./styles.css\";\n\nconst ModalContainer = ({ open, handleClose, children, title }) => {\n  return (\n    <Modal open={open} onClose={handleClose}>\n      <div className=\"ledger-modal-body\">\n        <div className=\"modal-title\">{title}</div>\n        {children}\n      </div>\n    </Modal>\n  );\n};\n\nexport default ModalContainer;\n","import _ from \"lodash\";\nimport { getLabel } from \"../../../hooks/use-labels\";\nimport { useEffect, useState } from \"react\";\nimport { fetchInsightsWithAI } from \"./LedgerProducts/lib/api\";\n\nimport LedgerHeader from \"./LedgerHeader\";\nimport LedgerProducts from \"./LedgerProducts\";\nimport LedgerInsights from \"./LedgerInsights\";\nimport ContentWrapper from \"../../../components/ContentWrapper\";\nimport ModalContainer from \"../../../components/ModalContainer\";\nimport Box from \"@mui/material/Box\";\n\nimport \"./styles.css\";\nimport { useDispatch } from \"react-redux\";\nimport { getLedgerData } from \"../../../redux/reducers/public/public-action\";\n\nlet timer = null;\n\nconst Ledgers = () => {\n  const dispatch = useDispatch();\n  const [open, setOpen] = useState(false);\n  const [tableAction, setTableAction] = useState(null);\n  const [userData, setUserData] = useState(\"\");\n  const [insightsData, setInsightsData] = useState([]);\n  const [disabled, setDisabled] = useState(true);\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!_.isEmpty(userData)) {\n      setDisabled(false);\n      dispatch(getLedgerData(userData));\n      localStorage.setItem(\"ledgerData\", JSON.stringify(userData));\n    }\n  }, [userData, dispatch]);\n\n  const getInsightsWithAI = (userData) => {\n    toggle();\n    fetchInsightsWithAI(userData)\n      .then((response) => {\n        setInsightsData(response);\n      })\n      .catch(console.error);\n  };\n\n  const handleTableAction = (table) => {\n    timer = setTimeout(() => {\n      setTableAction(table);\n    }, 100);\n  };\n\n  const toggle = () => {\n    setOpen((prev) => !prev);\n  };\n\n  const renderModal = () => {\n    if (!open) return null;\n\n    const modalProps = {\n      open,\n      handleClose: toggle,\n      title: getLabel(\"insightAILabel\"),\n    };\n\n    return (\n      <ModalContainer {...modalProps}>\n        {insightsData.length ? (\n          <LedgerInsights textList={insightsData} />\n        ) : (\n          <div className=\"center-align\">Loading...</div>\n        )}\n      </ModalContainer>\n    );\n  };\n\n  return (\n    <Box\n      sx={{\n        width: \"100%\",\n        height: \"100vh\",\n        p: 2,\n        border: \"2px solid black\",\n        maxWidth: \"auto\",\n        margin: \"auto\",\n        overflowX: \"auto\", // Horizontal scrolling\n        overflowY: \"hidden\", // Disable vertical scrolling\n        backgroundColor: \"#black\", // Set background color to black\n        color: \"white\", // Set text color to white for readability\n      }}\n    >\n      <LedgerHeader\n        table={tableAction}\n        getInsights={() => getInsightsWithAI(userData)}\n        disabled={disabled}\n      />\n      <LedgerProducts\n        tableAction={handleTableAction}\n        getUserData={setUserData}\n      />\n      {renderModal()}\n    </Box>\n  );\n};\n\nexport default Ledgers;\n","export const defaults = {\n  brandName: \"TradingJournal.ai\",\n\n  welcomeLabel: \"Welcome:\",\n  signOutLabel: \"Sign out\",\n\n  downloadCSVLabel: \"Download CSV\",\n  saveChangesLabel: \"Save Changes\",\n  getInsightsLabel: \"Get Insights with AI\",\n  insertNewRowLabel: \"INSERT NEW ROW\",\n\n  successLabel: \"Success!\",\n  deleteDateContent: \"Data deleted successfully!\",\n  okLabel: \"OK\",\n  saveDataContent: \"Data saved successfully!\",\n  areYouSureLabel: \"Are you sure?\",\n  cannotRevertLabel: \"You won't be able to revert this!\",\n  deleteLabel: \"Yes, delete it!\",\n\n  homeLabel: \"Home\",\n  riskManagementLabel: \"Risk Management\",\n  watchListLabel: \"Simulator\",\n  analyticsLabel: \"Analytics\",\n  blogsLabel: \"Kanban Board\",\n\n  /** Header Navigation */\n  homeNavLinkLabel: \"Home\",\n  aboutUsNavLinkLabel: \"About Us\",\n  servicesNavLinkLabel: \"Services\",\n\n  /** About Us */\n  aboutUsFirstContent:\n    'Mr. Harneet Singh Kharbanda is associated with TradingJournal.ai as an Advisor and is a full-time trader in the stock market with a strong social media following of more than 200,000 people who value his expertise. Harneet is a firm believer in the importance of maintaining a trading journal and advocates strongly for good trading psychology. His best-selling book, \"Trade Like a Monk,\" emphasizes the psychological aspects of trading. Known for his straightforward approach, Harneet is a sought-after speaker and has delivered impactful talks at prestigious institutions like IIIT UNA and Masters Union. He is passionate about simplifying the complexities of trading and investment, often emphasizing the importance of discipline. Through his educational efforts, Harneet\\'s mission is to make the stock market accessible to everyone, showing that with the right tools and mindset, anyone can achieve significant success in trading.',\n\n  aboutUsSecondContent:\n    \"Shushen Sharma, the Founder of TradingJournal.ai, is a seasoned trader with a decade of experience and a skilled software developer. He has won the 60-day challenge by the renowned broker Zerodha twice, showcasing his expertise in the trading domain. However, this challenge has been discontinued due to regulatory constraints. As a staunch advocate for risk management, Shushen deeply understands the essential factors necessary to scale the business of stock trading. Through TradingJournal.ai, he is committed to creating tools that enhance journaling practices and empower retail traders to implement a robust risk management framework effectively. Shushen believes in treating trading as a serious business—a structured discipline requiring thorough analysis and reflection. His goal with TradingJournal.ai is to transform retail traders into well-informed, strategic market participants by promoting a disciplined and systematic approach to trading. By combining his extensive market knowledge with his programming skills, Shushen guides traders toward higher performance and success in the competitive world of stock trading.\",\n\n  /**\n   * Pricing\n   */\n  pricingAndPlanTitle: \"Pricing & Plans\",\n  pricingAndPlanDescription:\n    \"Transparent pricing that scales with your trading business\",\n  packageTypeOne: \"Free Forever Plan (Starter)\",\n  packageTypeOneLiner: \"Your journey to disciplined trading begins here.\",\n  packageTypeOnePrice: \"₹0\",\n  packageTypeOneDuration: \"month\",\n  packageTypeOnePaymentDuration: \"No credit card required\",\n  packageTypeOneLinkLabel: \"Try it for free\",\n  packageTypeOnePlanOffers: \"What's included:\",\n  packageTypeOnePlanList: [\n    \"Access to basic analytics and charts\",\n    \"Limited historical data access (e.g., 30 days)\",\n    \"Basic performance insights (e.g., Win/Loss ratio)\",\n    \"1-day log retention\",\n    \"Community support\",\n  ],\n\n  packageTypeTwo: \"Pro Trader Plan\",\n  packageTypeTwoLiner: \"Take your trading to the next level.\",\n  packageTypeTwoPrice: \"₹19\",\n  packageTypeTwoDuration: \"month\",\n  packageTypeTwoPaymentDuration: \"Billed monthly\",\n  packageTypeTwoLinkLabel: \"Get Started\",\n  packageTypeTwoPlanOffers: \"Everything in Free, plus:\",\n  packageTypeTwoPlanList: [\n    \"Unlimited portfolios and trades\",\n    \"Risk management tools and dynamic stop-loss calculator\",\n    \"AI-driven trade suggestions or journaling prompts\",\n    \"Access to pre-built templates for journaling\",\n    \"Onboarding Support\",\n  ],\n\n  packageTypeThree: \"Professional Traders\",\n  packageTypeThreeLiner: \"For teams that are scaling up\",\n  packageTypeThreePrice: \"₹159\",\n  packageTypeThreeDuration: \"month\",\n  packageTypeThreePaymentDuration: \"Billed monthly\",\n  packageTypeThreeLinkLabel: \"Contact Sales\",\n  packageTypeThreePlanOffers: \"Everything in Ridiculous, plus:\",\n  packageTypeThreePlanList: [\n    \"Unlimited Unified API calls\",\n    \"Unlimited Premium integrations\",\n    \"White labeling\",\n    \"Volume API pricing\",\n    \"30-day log retention\",\n    \"Roadmap request priority\",\n    \"Dedicated account manager\",\n  ],\n\n  compareAndPlanFeatures: \"Compare plans and features\",\n  chosePlanFeatureDescription: \"Choose the plan that's right for your business\",\n  faqLabel: \"FAQs\",\n\n  tryItFreeLabel: \"Try It Free\",\n  getStartedLabel: \"Get Started\",\n  contactSalesLabel: \"Contact Sales\",\n\n  /** Payment Gateway ***/\n\n  paymentGatewayLabel: \"PhonePe Payment Gateway\",\n  payWithLabel: \"Pay with PhonePe\",\n  congratulationsLabel: \"Congratulations\",\n  successContent: \"You have subscribed for AI feature\",\n\n  /**Kanban Board Page */\n  AddNewStockToWatchListLabel: \"ADD NEW STOCK \",\n};\n","let metadata;\n\nconst getMetaLabels = (metadata) => {\n  return metadata.filter(({ type }) => type === \"LABEL\");\n};\n\nconst getMetaStyles = (metadata) => {\n  return metadata.filter(({ type }) => type === \"STYLE\");\n};\n\nexport const setMetadata = (_metadata) => {\n  metadata = {};\n  const label = getMetaLabels(_metadata);\n  const style = getMetaStyles(_metadata);\n\n  metadata = {\n    ...(label.length && { label }),\n    ...(style.length && { style }),\n  };\n\n  localStorage.setItem(\"metadata\", JSON.stringify(metadata));\n};\n\nconst getMetadata = () => {\n  if (!metadata) {\n    metadata = JSON.parse(localStorage.getItem(\"metadata\") || \"{}\");\n  }\n  return metadata;\n};\n\nexport const styles = () => {\n  return getMetadata()?.style || [];\n};\n\nexport const labels = () => {\n  return getMetadata()?.label || [];\n};\n","import { getParameter } from \"../utils/common-utils\";\nimport { defaults } from \"../utils/defaults\";\nimport { labels } from \"../utils/metadata\";\n\nexport const getLabels = (keys) => {\n  const labelsData = {};\n  const labelInformations = labels();\n\n  keys.forEach((key) => {\n    let labelInfo = getParameter(labelInformations, key);\n\n    let data = labelInfo\n      ? labelInfo.values.length === 1\n        ? labelInfo.values[0]\n        : labelInfo.values\n      : defaults[key];\n\n    labelsData[key] = data;\n  });\n\n  return labelsData;\n};\n\nexport const useLabels = (keys) => {\n  return getLabels(keys);\n};\n\nexport const getLabel = (key) => {\n  const labelData = labels();\n  const labelInfo = getParameter(labelData, key);\n\n  return labelInfo\n    ? labelInfo.values.length === 1\n      ? labelInfo.values[0]\n      : labelInfo.values\n    : defaults[key];\n};\n","import { Button } from \"@mui/material\";\nimport React from \"react\";\n\nconst LedgerButton = ({\n  type,\n  label,\n  size = \"lg\",\n  disable = false,\n  onClick,\n  htmlType = null,\n  className,\n  icon,\n  width,\n  style,\n  variant,\n  hoverType,\n}) => {\n  const { pixels, unit } = width || { pixels: null, unit: null };\n\n  const styles = {\n    width:\n      width && typeof width === \"object\" ? `${pixels}${unit}` : `${width}px`,\n    ...style,\n    backgroundColor: \"#38b88d\",\n  };\n\n  return (\n    <Button\n      type={htmlType}\n      id={label}\n      startIcon={icon}\n      className={`${className} button-box-shadow ledger-button button-${\n        size ? size : \"default\"\n      } ${!disable ? `${type}-enabled` : `${type}-disabled`}${\n        hoverType ? \" \" + hoverType : \"\"\n      }`}\n      onClick={(e) => {\n        e.preventDefault();\n        !disable && onClick && onClick(e);\n      }}\n      style={{ ...styles }}\n      variant={variant}\n      disabled={disable}\n    >\n      {label && label}\n    </Button>\n  );\n};\n\nexport default LedgerButton;\n"],"names":["_ref","title","text","btnLabel","iconType","Swal","icon","confirmButtonText","supabase","createClient","process","openAIConfig","apiKey","apiUrl","promptText","tableName","watchlistTableName","fetchUserLedgerData","async","from","select","eq","userId","order","ascending","postUserLedgerData","insert","formData","deleteUserLedgerData","delete","match","id","dataID","updateUserLedgerData","updateData","update","fetchInsightsWithAI","requestBody","messages","role","content","concat","JSON","stringify","max_tokens","Math","min","length","temperature","frequency_penalty","presence_penalty","top_p","stop","response","fetch","method","headers","body","json","choices","message","split","map","line","trim","postWatchListData","fetchWatchlistData","data","error","console","err","updateCardStatus","taskId","newStatus","status","success","table","getInsights","disabled","_jsxs","className","children","_jsx","LedgerButton","label","getLabel","type","variant","onClick","hoverType","size","disable","AI","setCreatingRow","AddNewRow","log","Download","style","marginLeft","totalPercentageRate","setProfitLoss","fieldData","quantity","sellPrice","buyPrice","toFixed","setAmountInvested","setRoce","setBrokerage","setHoldDays","buyDate","sellDate","buy","Date","sell","diffTime","abs","ceil","errorMessage","validateRequired","value","dateValidations","buy_date","sell_date","row","openModal","Box","sx","display","gap","Tooltip","IconButton","setEditingRow","color","EditIcon","DeleteIcon","items","onSubmit","onDelete","onEdit","invalidSellDate","sellDateFocused","tableAction","errors","setErrors","useState","columnNames","setColumnNames","loading","setLoading","useEffect","_","tableColumns","onColumnFocusHandler","validationErrors","focusedColumn","arguments","undefined","preparedColumns","prepareLedgerColumns","onColumnFocus","accessorKey","header","muiEditTextFieldProps","required","stockSymbol","helperText","onFocus","inputProps","reasonToBuy","editVariant","editSelectOptions","gttEnabled","enableEditing","columns","useMemo","handleCreateProduct","values","newValidationErrors","product","Object","some","openDeleteConfirmModal","showCancelButton","confirmButtonColor","cancelButtonColor","then","result","isConfirmed","useMaterialReactTable","enableColumnOrdering","createDisplayMode","editDisplayMode","initialState","density","columnPinning","left","getRowId","muiTableContainerProps","border","muiTableHeadCellProps","backgroundColor","minWidth","alignContent","muiColumnActionsButtonProps","borderRight","borderRadius","muiTableBodyCellProps","muiTopToolbarProps","muiBottomToolbarProps","onActionCellChange","onCreatingRowCancel","onCreatingRowSave","_ref2","onEditingRowCancel","onEditingRowSave","_ref3","renderRowActions","_ref4","TableActions","renderTopToolbarCustomActions","_ref5","MaterialReactTable","getUserData","user_uuid","getStorageStringItem","userIdKey","productList","setProductList","userUUID","useSelector","state","public","validSellDate","setValidSellDate","userID","setUserID","getLedgerProductList","preparedData","item","stock_name","buy_price","sell_price","brokerage","daysHold","days_hold","reason_to_buy","gtt_enabled","profitLoss","profit_loss","amount","Amount","annualReturnGenerated","annual_return_generated","roce","prepareUserLedgerData","onFinishHandler","action","rowData","getSubmissionData","parseFloat","user_id","onUpdate","SwalNotification","catch","updatedData","LPListing","currentList","filter","textList","index","open","handleClose","Modal","onClose","timer","Ledgers","dispatch","useDispatch","setOpen","setTableAction","userData","setUserData","insightsData","setInsightsData","setDisabled","clearTimeout","getLedgerData","localStorage","setItem","toggle","prev","width","height","p","maxWidth","margin","overflowX","overflowY","LedgerHeader","getInsightsWithAI","LedgerProducts","setTimeout","renderModal","modalProps","ModalContainer","LedgerInsights","defaults","brandName","welcomeLabel","signOutLabel","downloadCSVLabel","saveChangesLabel","getInsightsLabel","insertNewRowLabel","successLabel","deleteDateContent","okLabel","saveDataContent","areYouSureLabel","cannotRevertLabel","deleteLabel","homeLabel","riskManagementLabel","watchListLabel","analyticsLabel","blogsLabel","homeNavLinkLabel","aboutUsNavLinkLabel","servicesNavLinkLabel","aboutUsFirstContent","aboutUsSecondContent","pricingAndPlanTitle","pricingAndPlanDescription","packageTypeOne","packageTypeOneLiner","packageTypeOnePrice","packageTypeOneDuration","packageTypeOnePaymentDuration","packageTypeOneLinkLabel","packageTypeOnePlanOffers","packageTypeOnePlanList","packageTypeTwo","packageTypeTwoLiner","packageTypeTwoPrice","packageTypeTwoDuration","packageTypeTwoPaymentDuration","packageTypeTwoLinkLabel","packageTypeTwoPlanOffers","packageTypeTwoPlanList","packageTypeThree","packageTypeThreeLiner","packageTypeThreePrice","packageTypeThreeDuration","packageTypeThreePaymentDuration","packageTypeThreeLinkLabel","packageTypeThreePlanOffers","packageTypeThreePlanList","compareAndPlanFeatures","chosePlanFeatureDescription","faqLabel","tryItFreeLabel","getStartedLabel","contactSalesLabel","paymentGatewayLabel","payWithLabel","congratulationsLabel","successContent","AddNewStockToWatchListLabel","metadata","getMetadata","parse","getItem","labels","_getMetadata2","useLabels","keys","labelsData","labelInformations","forEach","key","labelInfo","getParameter","getLabels","labelData","htmlType","pixels","unit","styles","Button","startIcon","e","preventDefault"],"sourceRoot":""}