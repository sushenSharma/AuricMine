{"version":3,"file":"static/js/974.c609fb83.chunk.js","mappings":"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","sources":["containers/Main/WatchList/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport \"../../../assets/styles/TradingGameComparison.css\";\n\nconst Watchlist = () => {\n  const [seedCapital] = useState(100000); // Fixed seed capital to 1 lakh\n  const [seedLossBuffer, setSeedLossBuffer] = useState(250);\n  const [results, setResults] = useState({ withAlgo: [], withoutAlgo: [] });\n  const [metrics, setMetrics] = useState({}); // State for metrics\n  const [showMetricsDefinitions, setShowMetricsDefinitions] = useState(false); // Toggle for side panel\n\n  const minStopLossPercent = 0.02;\n  const maxStopLossPercent = 0.2;\n  const winFactorIncrement = 1.2;\n  const lossFactorDecrement = 1.35;\n  const staticStopLossPercent = 0.04; // For non-algo scenario, fixed at 5%\n\n  // Generate randomized profit or loss states\n  const generateRandomTradeStates = (numTrades) => {\n    return Array.from({ length: numTrades }, () => ({\n      isProfit: Math.random() >= 0.5, // Randomly decide profit or loss\n    }));\n  };\n\n  const calculateMetrics = (capitalSeries) => {\n    const totalTrades = capitalSeries.length;\n    const finalCapital = capitalSeries[capitalSeries.length - 1].updatedCapital;\n    const maxCapital = Math.max(...capitalSeries.map((c) => c.updatedCapital));\n    const minCapital = Math.min(...capitalSeries.map((c) => c.updatedCapital));\n\n    let maxDrawdown = 0;\n    let peakCapital = capitalSeries[0].updatedCapital;\n    capitalSeries.forEach((c) => {\n      if (c.updatedCapital > peakCapital) {\n        peakCapital = c.updatedCapital;\n      }\n      const drawdown = ((peakCapital - c.updatedCapital) / peakCapital) * 100;\n      if (drawdown > maxDrawdown) {\n        maxDrawdown = drawdown;\n      }\n    });\n\n    const capitalReturns = capitalSeries.map((c, i, arr) =>\n      i === 0 ? 0 : c.updatedCapital - arr[i - 1].updatedCapital\n    );\n    const meanReturns =\n      capitalReturns.reduce((sum, val) => sum + val, 0) / capitalReturns.length;\n    const variance =\n      capitalReturns.reduce((sum, val) => sum + (val - meanReturns) ** 2, 0) /\n      (capitalReturns.length - 1);\n    const volatility = Math.sqrt(variance);\n\n    const winningTrades = capitalSeries.filter(\n      (c) => c.tradeOutcome > 0\n    ).length;\n    const losingTrades = capitalSeries.filter((c) => c.tradeOutcome < 0).length;\n    const profitLossRatio =\n      losingTrades === 0 ? winningTrades : winningTrades / losingTrades;\n\n    const positiveReturns = capitalSeries.filter(\n      (c) => c.updatedCapital >= seedCapital\n    ).length;\n\n    return {\n      finalCapital: finalCapital.toFixed(2),\n      maxDrawdown: maxDrawdown.toFixed(2),\n      volatility: volatility.toFixed(2),\n      profitLossRatio: profitLossRatio.toFixed(2),\n      positiveReturns: positiveReturns,\n      totalTrades: totalTrades,\n    };\n  };\n\n  // Simulate profit/loss outcome based on state\n  const simulateTradeOutcome = (isProfit, capital, stopLoss) => {\n    if (isProfit) {\n      return Math.random() * 10000;\n    } else {\n      return -(capital * stopLoss);\n    }\n  };\n\n  // Simulate with algorithm - dynamic stop-loss logic\n  const simulateTradeOutcomeWithAlgo = (isProfit, capital, stopLoss) => {\n    if (isProfit) {\n      const profitMultiplier = Math.random() > 0.5 ? 1 : 1.5;\n      const profitPercent = stopLoss * profitMultiplier;\n      return capital * profitPercent;\n    } else {\n      return -(capital * stopLoss);\n    }\n  };\n\n  const simulateWithAlgo = (tradeStates) => {\n    let capital = seedCapital;\n    let lossBuffer = seedLossBuffer;\n    let stopLoss = minStopLossPercent;\n    let consecutiveWins = 0;\n    let consecutiveLosses = 0;\n\n    const resultsWithAlgo = tradeStates.map((state, index) => {\n      const outcome = simulateTradeOutcomeWithAlgo(\n        state.isProfit,\n        capital,\n        stopLoss\n      );\n\n      if (state.isProfit) {\n        const profit66 = outcome * 0.66;\n        const profit33 = outcome * 0.33;\n        capital += profit66;\n        lossBuffer += profit33;\n        consecutiveWins += 1;\n        consecutiveLosses = 0;\n        stopLoss = Math.min(stopLoss * winFactorIncrement, maxStopLossPercent);\n      } else {\n        capital += outcome;\n        if (capital < 0) capital = 0;\n        if (lossBuffer > 0) {\n          const lossRefill = Math.min(-outcome, lossBuffer);\n          lossBuffer -= lossRefill;\n          capital += lossRefill;\n        }\n        consecutiveLosses += 1;\n        consecutiveWins = 0;\n        stopLoss = Math.max(stopLoss / lossFactorDecrement, minStopLossPercent);\n      }\n\n      return {\n        tradeNumber: index + 1,\n        tradeOutcome: outcome,\n        updatedCapital: capital,\n        stopLossPercent: stopLoss * 100,\n      };\n    });\n\n    return resultsWithAlgo;\n  };\n\n  const simulateWithoutAlgo = (tradeStates) => {\n    let capital = seedCapital;\n    return tradeStates.map((state, index) => {\n      const outcome = simulateTradeOutcome(\n        state.isProfit,\n        capital,\n        staticStopLossPercent\n      );\n      capital += outcome;\n      return {\n        tradeNumber: index + 1,\n        tradeOutcome: outcome,\n        updatedCapital: capital,\n        stopLossPercent: staticStopLossPercent * 100,\n      };\n    });\n  };\n\n  const compareScenarios = () => {\n    const tradeStates = generateRandomTradeStates(50);\n    const withoutAlgo = simulateWithoutAlgo(tradeStates);\n    const withAlgo = simulateWithAlgo(tradeStates);\n\n    const metricsWithoutAlgo = calculateMetrics(withoutAlgo);\n    const metricsWithAlgo = calculateMetrics(withAlgo);\n\n    setResults({ withAlgo, withoutAlgo });\n    setMetrics({ withoutAlgo: metricsWithoutAlgo, withAlgo: metricsWithAlgo });\n  };\n\n  const dataWithAlgo = {\n    labels: results.withAlgo.map((_, index) => `Trade ${index + 1}`),\n    datasets: [\n      {\n        label: \"With Algorithm - Capital\",\n        data: results.withAlgo.map((result) => result.updatedCapital),\n        borderColor: \"green\",\n        fill: false,\n      },\n      {\n        label: \"With Algorithm - Stop Loss (%)\",\n        data: results.withAlgo.map((result) => result.stopLossPercent),\n        borderColor: \"red\",\n        fill: false,\n      },\n    ],\n  };\n\n  const dataWithoutAlgo = {\n    labels: results.withoutAlgo.map((_, index) => `Trade ${index + 1}`),\n    datasets: [\n      {\n        label: \"Without Algorithm - Capital\",\n        data: results.withoutAlgo.map((result) => result.updatedCapital),\n        borderColor: \"blue\",\n        fill: false,\n      },\n      {\n        label: \"Without Algorithm - Stop Loss (%)\",\n        data: results.withoutAlgo.map((result) => result.stopLossPercent),\n        borderColor: \"orange\",\n        fill: false,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Trading Game: Algorithm vs No Algorithm</h1>\n      <div className=\"input-section\">\n        <div className=\"button-container\">\n          <button className=\"action-button\" onClick={compareScenarios}>\n            Compare Scenarios\n          </button>\n          <button\n            className=\"toggle-button\"\n            onClick={() => setShowMetricsDefinitions(!showMetricsDefinitions)}\n          >\n            {showMetricsDefinitions ? \"Hide Definitions\" : \"Show Definitions\"}\n          </button>\n        </div>\n      </div>\n\n      {showMetricsDefinitions && (\n        <div className=\"side-panel\">\n          <h3>Metrics Definitions</h3>\n          <ul>\n            <li>\n              <strong>Max Drawdown</strong>: Largest drop in portfolio value\n              from peak to trough.\n            </li>\n            <li>\n              <strong>Volatility</strong>: Degree of fluctuation in portfolio\n              value.\n            </li>\n            <li>\n              <strong>Profit/Loss Ratio</strong>: Ratio of winning to losing\n              trades.\n            </li>\n            <li>\n              <strong>Positive Returns</strong>: Number of trades where capital\n              exceeded seed capital.\n            </li>\n          </ul>\n        </div>\n      )}\n\n      {results.withAlgo.length > 0 && (\n        <div className=\"chart-section\">\n          <div className=\"chart-card\">\n            <h2 className=\"chart-title\">With Algorithm</h2>\n            <Line data={dataWithAlgo} />\n          </div>\n          <div className=\"chart-card\">\n            <h2 className=\"chart-title\">Without Algorithm</h2>\n            <Line data={dataWithoutAlgo} />\n          </div>\n        </div>\n      )}\n\n      {results.withAlgo.length > 0 && (\n        <div className=\"metrics-section\">\n          <h3 className=\"section-title\">Metrics Summary</h3>\n          <div className=\"metrics-card\">\n            <h4 className=\"card-title\">With Algorithm</h4>\n            <p>Final Capital: {metrics.withAlgo?.finalCapital}</p>\n            <p>Max Drawdown: {metrics.withAlgo?.maxDrawdown}%</p>\n            <p>Volatility: {metrics.withAlgo?.volatility}</p>\n            <p>Profit/Loss Ratio: {metrics.withAlgo?.profitLossRatio}</p>\n            <p>\n              Positive Returns: {metrics.withAlgo?.positiveReturns} out of{\" \"}\n              {metrics.withAlgo?.totalTrades} trades\n            </p>\n          </div>\n\n          <div className=\"metrics-card\">\n            <h4 className=\"card-title\">Without Algorithm</h4>\n            <p>Final Capital: {metrics.withoutAlgo?.finalCapital}</p>\n            <p>Max Drawdown: {metrics.withoutAlgo?.maxDrawdown}%</p>\n            <p>Volatility: {metrics.withoutAlgo?.volatility}</p>\n            <p>Profit/Loss Ratio: {metrics.withoutAlgo?.profitLossRatio}</p>\n            <p>\n              Positive Returns: {metrics.withoutAlgo?.positiveReturns} out of{\" \"}\n              {metrics.withoutAlgo?.totalTrades} trades\n            </p>\n          </div>\n        </div>\n      )}\n\n      {results.withAlgo.length > 0 && (\n        <div className=\"trade-details-section\">\n          <h3 className=\"section-title\">Detailed Trade Information</h3>\n          <div className=\"trade-card\">\n            <h4 className=\"card-title\">With Algorithm:</h4>\n            {results.withAlgo.map((trade) => (\n              <p key={trade.tradeNumber}>\n                Trade {trade.tradeNumber}: Outcome:{\" \"}\n                {trade.tradeOutcome.toFixed(2)}, Capital:{\" \"}\n                {trade.updatedCapital.toFixed(2)}, Stop-Loss Percent:{\" \"}\n                {trade.stopLossPercent.toFixed(2)}%\n              </p>\n            ))}\n          </div>\n\n          <div className=\"trade-card\">\n            <h4 className=\"card-title\">Without Algorithm:</h4>\n            {results.withoutAlgo.map((trade) => (\n              <p key={trade.tradeNumber}>\n                Trade {trade.tradeNumber}: Outcome:{\" \"}\n                {trade.tradeOutcome.toFixed(2)}, Capital:{\" \"}\n                {trade.updatedCapital.toFixed(2)}, Stop-Loss Percent:{\" \"}\n                {trade.stopLossPercent.toFixed(2)}%\n              </p>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Watchlist;\n"],"names":["Watchlist","_metrics$withAlgo","_metrics$withAlgo2","_metrics$withAlgo3","_metrics$withAlgo4","_metrics$withAlgo5","_metrics$withAlgo6","_metrics$withoutAlgo","_metrics$withoutAlgo2","_metrics$withoutAlgo3","_metrics$withoutAlgo4","_metrics$withoutAlgo5","_metrics$withoutAlgo6","seedCapital","useState","seedLossBuffer","setSeedLossBuffer","results","setResults","withAlgo","withoutAlgo","metrics","setMetrics","showMetricsDefinitions","setShowMetricsDefinitions","calculateMetrics","capitalSeries","totalTrades","length","finalCapital","updatedCapital","Math","max","map","c","min","maxDrawdown","peakCapital","forEach","drawdown","capitalReturns","i","arr","meanReturns","reduce","sum","val","variance","volatility","sqrt","winningTrades","filter","tradeOutcome","losingTrades","profitLossRatio","positiveReturns","toFixed","simulateWithAlgo","tradeStates","capital","lossBuffer","stopLoss","consecutiveWins","consecutiveLosses","state","index","outcome","simulateTradeOutcomeWithAlgo","isProfit","random","lossRefill","tradeNumber","stopLossPercent","simulateWithoutAlgo","simulateTradeOutcome","staticStopLossPercent","dataWithAlgo","labels","_","concat","datasets","label","data","result","borderColor","fill","dataWithoutAlgo","_jsxs","className","children","_jsx","onClick","compareScenarios","numTrades","Array","from","metricsWithoutAlgo","metricsWithAlgo","Line","trade"],"sourceRoot":""}