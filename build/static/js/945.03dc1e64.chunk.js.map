{"version":3,"file":"static/js/945.03dc1e64.chunk.js","mappings":"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","sources":["components/SwalNotification/index.js","config/index_supabase.js","ui-kit/Buttons/LedgerButton/index.js","containers/Main/Ledgers/LedgerHeader/index.js","containers/Main/Ledgers/LedgerProducts/hooks.js","utils/validation.js","containers/Main/Ledgers/LedgerProducts/ledger-validations.js","containers/Main/Ledgers/LedgerProducts/LPListing/TableActions/index.js","containers/Main/Ledgers/LedgerProducts/LPListing/index.js","containers/Main/Ledgers/LedgerProducts/LPListing/lp-listing-utils.js","containers/Main/Ledgers/LedgerProducts/index.js","containers/Main/Ledgers/LedgerProducts/lib/api.js","containers/Main/Ledgers/LedgerProducts/ledger-products-utils.js","containers/Main/Ledgers/LedgerInsights/index.js","components/ContentWrapper/index.js","components/ModalContainer/index.js","containers/Main/Ledgers/index.js","utils/defaults.js","utils/metadata.js","hooks/use-labels.js"],"sourcesContent":["import Swal from \"sweetalert2\";\n\nconst SwalNotification = ({ title, text, btnLabel, iconType }) => {\n  return Swal.fire({\n    title,\n    text,\n    icon: iconType,\n    confirmButtonText: btnLabel,\n  });\n};\n\nexport default SwalNotification;\n","import { createClient } from \"@supabase/supabase-js\";\n\nexport const supabase = createClient(\n  process.env.REACT_APP_SUPABASE_URL,\n  process.env.REACT_APP_SUPABASE_ANON_KEY\n);\n\nexport const openAIConfig = {\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  apiUrl: process.env.REACT_APP_OPENAI_URL,\n  promptText: process.env.REACT_APP_OPENAI_API_PROMPT,\n};\n\nexport const tableName = process.env.REACT_APP_SUPABASE_TABLE_NAME;\n","import { Button } from \"@mui/material\";\nimport React from \"react\";\n\nconst LedgerButton = ({\n  type,\n  label,\n  size = \"lg\",\n  disable = false,\n  onClick,\n  htmlType = null,\n  className,\n  icon,\n  width,\n  style,\n  variant,\n  hoverType,\n}) => {\n  const { pixels, unit } = width || { pixels: null, unit: null };\n\n  const styles = {\n    width:\n      width && typeof width === \"object\" ? `${pixels}${unit}` : `${width}px`,\n    ...style,\n  };\n\n  return (\n    <Button\n      type={htmlType}\n      id={label}\n      startIcon={icon}\n      className={`${className} button-box-shadow ledger-button button-${\n        size ? size : \"default\"\n      } ${!disable ? `${type}-enabled` : `${type}-disabled`}${\n        hoverType ? \" \" + hoverType : \"\"\n      }`}\n      onClick={(e) => {\n        e.preventDefault();\n        !disable && onClick && onClick(e);\n      }}\n      style={{ ...styles }}\n      variant={variant}\n    >\n      {label && label}\n    </Button>\n  );\n};\n\nexport default LedgerButton;\n","import React from \"react\";\nimport { getLabel } from \"../../../../hooks/use-labels\";\n\nimport AI from \"@mui/icons-material/AutoFixHighOutlined\";\nimport Download from \"@mui/icons-material/DownloadOutlined\";\nimport AddNewRow from \"@mui/icons-material/AddToPhotosOutlined\";\nimport LedgerButton from \"../../../../ui-kit/Buttons/LedgerButton\";\n\nconst LedgerHeader = ({ table, getInsights, disabled }) => {\n  return (\n    <div className=\"ledger-header-container\">\n      <LedgerButton\n        label={getLabel(\"getInsightsLabel\")}\n        type=\"outlined\"\n        variant=\"contained\"\n        className=\"ledger-buttons get-insights\"\n        onClick={() => !disabled && getInsights()}\n        hoverType=\"success-color\"\n        size=\"md\"\n        disable={disabled}\n        icon={<AI></AI>}\n      />\n\n      <LedgerButton\n        type=\"outlined\"\n        variant=\"contained\"\n        className=\"ledger-buttons create-row\"\n        onClick={() => {\n          table.setCreatingRow(true);\n        }}\n        label={getLabel(\"insertNewRowLabel\")}\n        size=\"md\"\n        icon={<AddNewRow></AddNewRow>}\n      />\n\n      <LedgerButton\n        label={getLabel(\"downloadCSVLabel\")}\n        type=\"outlined\"\n        variant=\"contained\"\n        className=\"ledger-buttons download-csv\"\n        onClick={() => console.log(\"download-csv\")}\n        hoverType=\"primary-color\"\n        size=\"md\"\n        icon={<Download></Download>}\n        style={{ marginLeft: \"auto\" }}\n      />\n    </div>\n  );\n};\n\nexport default LedgerHeader;\n","const totalPercentageRate =\n  0.001 + 0.0000325 + 0.00000001 + 0.18 * (0.0000325 + 0.00000001) + 0.00015;\n\nexport const getSubmissionData = (fieldData, userUUID) => {\n  return [\n    {\n      stock_name: fieldData.stockSymbol,\n      buy_price: parseFloat(fieldData.buyPrice),\n      buy_date: fieldData.buyDate,\n      quantity: parseFloat(fieldData.quantity),\n      sell_price: parseFloat(fieldData.sellPrice),\n      sell_date: fieldData.sellDate,\n      brokerage: parseFloat(setBrokerage(fieldData)).toFixed(2),\n      days_hold: setHoldDays(fieldData),\n      reason_to_buy: fieldData.reasonToBuy,\n      gtt_enabled: fieldData.gttEnabled,\n      profit_loss: setProfitLoss(fieldData),\n      roce: parseFloat(setRoce(fieldData)).toFixed(2),\n      annual_return_generated: parseFloat(fieldData.annualReturnGenerated),\n      Amount: setAmountInvested(fieldData),\n      user_id: userUUID,\n    },\n  ];\n};\n\nconst setProfitLoss = (fieldData) => {\n  const { quantity, sellPrice, buyPrice } = fieldData;\n\n  const sellQty = sellPrice * quantity;\n  const buyQty = buyPrice * quantity;\n\n  const profitLoss = (sellQty - buyQty).toFixed(2);\n\n  return profitLoss;\n};\n\nconst setAmountInvested = (fieldData) => {\n  const { buyPrice, quantity } = fieldData;\n  const buyQty = buyPrice * quantity;\n\n  return buyQty.toFixed(2);\n};\n\nconst setRoce = (fieldData) => {\n  return (setProfitLoss(fieldData) / setAmountInvested(fieldData)) * 100;\n};\n\nconst setBrokerage = (fieldData) => {\n  const { buyPrice, quantity, sellPrice } = fieldData;\n  const buyQty = buyPrice * quantity;\n  const sellQty = sellPrice * quantity;\n\n  return buyQty * totalPercentageRate + sellQty * totalPercentageRate + 15.93;\n};\n\nconst setHoldDays = (fieldData) => {\n  const { buyDate, sellDate } = fieldData;\n\n  const buy = new Date(buyDate);\n  const sell = new Date(sellDate);\n\n  const diffTime = Math.abs(sell - buy);\n\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n  return diffDays;\n};\n","export const errorMessage = {\n  stockSymbol: \"Stock name is Required\",\n  buyPrice: \"Buying price is Required\",\n  buyDate: \"Buy date is Required\",\n  quantity: \"Quantity is Require\",\n  sellPrice: \"Sell price is Require\",\n  sellDate: \"Sell date is Required\",\n  brokerage: \"Brokerage is Required\",\n  daysHold: \"Days hold is Required\",\n  reasonToBuy: \"Reason to buy is Required\",\n  gttEnabled: \"GTT enabled is Required\",\n  profitLoss: \"Profit Loss is Required\",\n  amount: \"Amount is Required\",\n  annualReturnGenerated: \"Annual Return Generated is Required\",\n  roce: \"Roce is Required\",\n  lessSellDate: \"Sell date cannot be less than buy date.\",\n};\n","import { errorMessage } from \"../../../../utils/validation\";\n\nconst validateRequired = (value) => !!value.length;\n\nexport const ledgerProdcutValidation = (product) => {\n  return {\n    stockSymbol:\n      !validateRequired(product.stockSymbol) && errorMessage.stockSymbol,\n    buyPrice: !validateRequired(product.buyPrice) && errorMessage.buyPrice,\n    buyDate: !validateRequired(product.buyDate) && errorMessage.buyDate,\n    quantity: !validateRequired(product.quantity) && errorMessage.quantity,\n    sellPrice: !validateRequired(product.sellPrice) && errorMessage.sellPrice,\n    sellDate: !validateRequired(product.sellDate) && errorMessage.sellDate,\n    reasonToBuy:\n      !validateRequired(product.reasonToBuy) && errorMessage.reasonToBuy,\n    gttEnabled:\n      !validateRequired(product.gttEnabled) && errorMessage.gttEnabled,\n  };\n};\n\nexport const dateValidations = ({ buy_date, sell_date }) => {\n  const buyDate = new Date(buy_date);\n  const sellDate = new Date(sell_date);\n\n  if (buyDate > sellDate) {\n    return false;\n  }\n\n  return true;\n};\n","import React from \"react\";\nimport { Box, IconButton, Tooltip } from \"@mui/material\";\n\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nconst TableActions = ({ table, row, openModal }) => {\n  return (\n    <Box sx={{ display: \"flex\", gap: \"1rem\" }}>\n      <Tooltip title=\"Edit\">\n        <IconButton onClick={() => table.setEditingRow(row)} color=\"success\">\n          <EditIcon />\n        </IconButton>\n      </Tooltip>\n      <Tooltip title=\"Delete\">\n        <IconButton color=\"error\" onClick={() => openModal(row)}>\n          <DeleteIcon />\n        </IconButton>\n      </Tooltip>\n    </Box>\n  );\n};\n\nexport default TableActions;\n","import _ from \"lodash\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { prepareLedgerColumns } from \"./lp-listing-utils\";\nimport { getLabel } from \"../../../../../hooks/use-labels\";\nimport { errorMessage } from \"../../../../../utils/validation\";\nimport { ledgerProdcutValidation } from \"../ledger-validations\";\nimport {\n  MaterialReactTable,\n  useMaterialReactTable,\n} from \"material-react-table\";\n\nimport Swal from \"sweetalert2\";\nimport TableActions from \"./TableActions\";\n\nconst LPListing = ({\n  items,\n  onSubmit,\n  onDelete,\n  onEdit,\n  invalidSellDate,\n  sellDateFocused,\n  tableAction,\n}) => {\n  const [errors, setErrors] = useState({});\n  const [columnNames, setColumnNames] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (invalidSellDate) {\n      setErrors({\n        ...errors,\n        sellDate: errorMessage.lessSellDate,\n      });\n    }\n  }, [invalidSellDate, errors]);\n\n  useEffect(() => {\n    if (_.isEmpty(columnNames)) {\n      setLoading(true);\n\n      tableColumns(errors);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [columnNames, errors]);\n\n  useEffect(() => {\n    if (!_.isEmpty(errors)) {\n      tableColumns(errors);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [errors]);\n\n  const onColumnFocusHandler = (validationErrors, focusedColumn = \"\") => {\n    setErrors({\n      ...validationErrors,\n    });\n\n    if (focusedColumn === \"sellDate\" && invalidSellDate) {\n      sellDateFocused();\n      setErrors({\n        ...validationErrors,\n        sellDate: undefined,\n      });\n    }\n  };\n\n  const tableColumns = (validationErrors) => {\n    const preparedColumns = prepareLedgerColumns(\n      validationErrors,\n      onColumnFocusHandler\n    );\n    setColumnNames(preparedColumns);\n    setLoading(false);\n  };\n\n  const columns = useMemo(() => columnNames, [columnNames]);\n\n  const handleCreateProduct = (values, table) => {\n    const newValidationErrors = ledgerProdcutValidation(values);\n    if (Object.values(newValidationErrors).some((error) => error)) {\n      setErrors(newValidationErrors);\n      return;\n    }\n    setErrors({});\n    onSubmit(values, \"insert\", table);\n  };\n\n  const openDeleteConfirmModal = (row) => {\n    Swal.fire({\n      title: getLabel(\"areYouSureLabel\"),\n      text: getLabel(\"cannotRevertLabel\"),\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: getLabel(\"deleteLabel\"),\n    }).then((result) => {\n      if (result.isConfirmed) {\n        const { id } = row;\n        onDelete(id);\n      }\n    });\n  };\n\n  const table = useMaterialReactTable({\n    columns,\n    data: items,\n    enableColumnOrdering: true,\n    createDisplayMode: \"row\",\n    editDisplayMode: \"row\",\n    enableEditing: true,\n    initialState: {\n      density: \"compact\",\n      columnPinning: { left: [\"stockSymbol\"] },\n    },\n    getRowId: (row) => row.id,\n    muiTableContainerProps: {\n      sx: {\n        border: \"1px solid rgba(81, 81, 81, .5)\",\n      },\n    },\n    //Table Column names\n    muiTableHeadCellProps: {\n      sx: {\n        color: \"white\",\n        backgroundColor: \"#403d3d\",\n        minWidth: \"50px\",\n        alignContent: \"center\",\n      },\n    },\n    muiColumnActionsButtonProps: {\n      sx: {\n        color: \"white\",\n        borderRight: \"2px solid white\",\n        borderRadius: \"0\",\n      },\n    },\n\n    //Actual Content of table\n    muiTableBodyCellProps: {\n      sx: {\n        border: \"3\",\n        backgroundColor: \"#d0d5db\",\n        color: \"#000000\",\n      },\n    },\n    //Top Right corner buttons like search, density\n    muiTopToolbarProps: {\n      sx: {\n        backgroundColor: \"#000000\",\n        color: \"#fff\",\n        \"& .MuiIconButton-root\": {\n          color: \"white\",\n        },\n      },\n    },\n    muiBottomToolbarProps: {\n      className: \"custom-footer\",\n      sx: {\n        backgroundColor: \"#000000\",\n        color: \"#fff\",\n        \"& .MuiIconButton-root,.MuiBox-root label, .MuiBox-root div,.MuiSvgIcon-root\":\n          {\n            color: \"white\",\n          },\n      },\n    },\n\n    onActionCellChange: () => console.log(\"1\"),\n    onCreatingRowCancel: () => setErrors({}),\n    onCreatingRowSave: ({ values, table }) =>\n      handleCreateProduct(values, table),\n    onEditingRowCancel: () => setErrors({}),\n    onEditingRowSave: ({ values, table }) => onEdit(values, \"update\", table),\n    renderRowActions: ({ row, table }) => (\n      <TableActions\n        table={table}\n        row={row}\n        openModal={openDeleteConfirmModal}\n      />\n    ),\n    renderTopToolbarCustomActions: ({ table }) => tableAction(table),\n  });\n\n  if (loading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"ledger-product-listing-container\">\n      <MaterialReactTable table={table} />\n    </div>\n  );\n};\n\nexport default LPListing;\n","export const prepareLedgerColumns = (validationErrors, onColumnFocus) => {\n  return [\n    {\n      accessorKey: \"stockSymbol\",\n      header: \"Stock Symbol\",\n      muiEditTextFieldProps: {\n        type: \"string\",\n        required: true,\n        error: !!validationErrors?.stockSymbol,\n        helperText: validationErrors?.stockSymbol,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            stockSymbol: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"buyPrice\",\n      header: \"Buy Price\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        required: true,\n        inputProps: { min: 0 },\n        error: !!validationErrors?.buyPrice,\n        helperText: validationErrors?.buyPrice,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            buyPrice: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"buyDate\",\n      header: \"Buy Date\",\n      muiEditTextFieldProps: {\n        type: \"date\",\n        required: true,\n        error: !!validationErrors?.buyDate,\n        helperText: validationErrors?.buyDate,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            buyDate: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"quantity\",\n      header: \"Quantity\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        required: true,\n        inputProps: { min: 0 },\n        error: !!validationErrors?.quantity,\n        helperText: validationErrors?.quantity,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            quantity: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"reasonToBuy\",\n      header: \"Reason to Buy\",\n      muiEditTextFieldProps: {\n        type: \"string\",\n        required: true,\n        error: !!validationErrors?.reasonToBuy,\n        helperText: validationErrors?.reasonToBuy,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            reasonToBuy: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"sellPrice\",\n      header: \"Sell Price\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        required: true,\n        inputProps: { min: 0 },\n        error: !!validationErrors?.sellPrice,\n        helperText: validationErrors?.sellPrice,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            sellPrice: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"sellDate\",\n      header: \"Sell Date\",\n      muiEditTextFieldProps: {\n        type: \"date\",\n        required: true,\n        error: !!validationErrors?.sellDate,\n        helperText: validationErrors?.sellDate,\n        onFocus: () =>\n          onColumnFocus(\n            {\n              ...validationErrors,\n              sellDate: undefined,\n            },\n            \"sellDate\"\n          ),\n      },\n    },\n\n    {\n      accessorKey: \"gttEnabled\",\n      header: \"GTT Enabled\",\n      editVariant: \"select\",\n      editSelectOptions: [\"YES\", \"NO\"],\n      muiEditTextFieldProps: {\n        select: true,\n        error: !!validationErrors?.gttEnabled,\n        helperText: validationErrors?.gttEnabled,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            gttEnabled: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"brokerage\",\n      header: \"Brokerage\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"daysHold\",\n      header: \"Days Hold\",\n      muiEditTextFieldProps: {\n        type: \"string\",\n        disabled: true,\n      },\n    },\n\n    {\n      accessorKey: \"profitLoss\",\n      header: \"Profit / Loss\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"amount\",\n      header: \"Amount Invested\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"annualReturnGenerated\",\n      header: \"Annual Return Generated\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"roce\",\n      header: \"Roce\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"id\",\n      header: \"ID\",\n      enableEditing: false,\n      size: 80,\n    },\n  ];\n};\n","import _ from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { userIdKey } from \"../../../../constants.js\";\nimport { getSubmissionData } from \"./hooks.js\";\nimport { useSelector } from \"react-redux\";\nimport { getLabel } from \"../../../../hooks/use-labels.js\";\nimport { dateValidations } from \"./ledger-validations.js\";\nimport { prepareUserLedgerData } from \"./ledger-products-utils.js\";\nimport { getStorageStringItem } from \"../../../../utils/common-utils.js\";\nimport {\n  deleteUserLedgerData,\n  fetchUserLedgerData,\n  postUserLedgerData,\n  updateUserLedgerData,\n} from \"./lib/api.js\";\n\nimport LPListing from \"./LPListing\";\n\nimport SwalNotification from \"../../../../components/SwalNotification/index.js\";\n\nconst LedgerProducts = ({ tableAction, getUserData }) => {\n  const user_uuid = getStorageStringItem(userIdKey);\n  const [productList, setProductList] = useState([]);\n  const { userUUID } = useSelector((state) => state.public);\n  const [validSellDate, setValidSellDate] = useState(false);\n\n  const [userID, setUserID] = useState(\"\");\n\n  useEffect(() => {\n    if (userUUID || user_uuid) setUserID(userUUID || user_uuid);\n  }, [userUUID, user_uuid]);\n\n  useEffect(() => {\n    if (userID) getLedgerProductList(userID, getUserData);\n  }, [userID, getUserData]);\n\n  const getLedgerProductList = async (userID, getUserData) => {\n    fetchUserLedgerData(userID).then(({ data, error }) => {\n      if (error) {\n        console.log(error);\n        return;\n      }\n\n      getUserData(JSON.stringify(data));\n      const preparedData = prepareUserLedgerData(data);\n      setProductList(preparedData);\n    });\n  };\n  const onDeleteHandler = async (dataID) => {\n    try {\n      await deleteUserLedgerData(dataID);\n      setProductList((currentList) =>\n        currentList.filter((item) => item.id !== dataID)\n      );\n\n      SwalNotification({\n        title: getLabel(\"successLabel\"),\n        text: getLabel(\"deleteDateContent\"),\n        iconType: \"success\",\n        btnLabel: getLabel(\"okLabel\"),\n      });\n    } catch (error) {\n      console.error(\"Error deleting data:\", error);\n    }\n  };\n\n  const onFinishHandler = (values, action, table) => {\n    const { id } = values;\n    const rowData = getSubmissionData(values, user_uuid);\n\n    if (!_.isEmpty(rowData)) {\n      action === \"insert\" && onSubmit(rowData, table);\n      action === \"update\" && onUpdate(id, rowData, table);\n    }\n  };\n\n  const onSubmit = async (rowData, table) => {\n    const valid = dateValidations(rowData[0]);\n\n    if (valid) {\n      postUserLedgerData(rowData)\n        .then((response) => {\n          table.setCreatingRow(null);\n          getLedgerProductList(userID, getUserData);\n\n          SwalNotification({\n            title: getLabel(\"successLabel\"),\n            text: getLabel(\"saveDataContent\"),\n            iconType: \"success\",\n            btnLabel: getLabel(\"okLabel\"),\n          });\n        })\n        .catch((error) => console.error);\n    } else {\n      setValidSellDate(true);\n    }\n  };\n\n  const onUpdate = (dataID, updatedData, table) => {\n    const valid = dateValidations(updatedData[0]);\n\n    if (valid) {\n      updateUserLedgerData(dataID, updatedData)\n        .then((response) => {\n          getLedgerProductList(userID, getUserData);\n          table.setEditingRow(null);\n\n          SwalNotification({\n            title: getLabel(\"successLabel\"),\n            text: getLabel(\"saveDataContent\"),\n            iconType: \"success\",\n            btnLabel: getLabel(\"okLabel\"),\n          });\n        })\n        .catch((error) => {\n          console.error(\"Error updating data:\", error);\n        });\n    } else {\n      setValidSellDate(true);\n    }\n  };\n\n  return (\n    <div className=\"ledger-products-container\">\n      <LPListing\n        items={productList}\n        onSubmit={onFinishHandler}\n        onDelete={onDeleteHandler}\n        onEdit={onFinishHandler}\n        invalidSellDate={validSellDate}\n        sellDateFocused={() => setValidSellDate(false)}\n        tableAction={tableAction}\n      />\n    </div>\n  );\n};\n\nexport default LedgerProducts;\n","import {\n  supabase,\n  tableName,\n  openAIConfig,\n} from \"../../../../../config/index_supabase\";\n\nexport const fetchUserLedgerData = async (userId) => {\n  return await supabase\n    .from(tableName)\n    .select()\n    .eq(\"user_id\", userId)\n    .order(\"buy_date\", { ascending: true });\n};\n\nexport const postUserLedgerData = async (formData) => {\n  return await supabase.from(tableName).insert(formData);\n};\n\nexport const deleteUserLedgerData = async (dataID) => {\n  return await supabase.from(tableName).delete().match({ id: dataID });\n};\n\nexport const updateUserLedgerData = async (dataID, updateData) => {\n  return await supabase\n    .from(tableName)\n    .update(updateData)\n    .match({ id: dataID });\n};\n\nexport const fetchInsightsWithAI = async (formData) => {\n  const requestBody = {\n    prompt: `With json data ${formData}, ${openAIConfig.promptText}`,\n    max_tokens: Math.min(formData.length, 1000),\n  };\n\n  const response = await fetch(openAIConfig.apiUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"api-key\": openAIConfig.apiKey,\n      \"Cache-Control\": \"no-cache\",\n    },\n    body: JSON.stringify(requestBody),\n  });\n\n  const data = await response.json();\n  const text = data.choices[0].text.split(\"\\n\").map((line) => line.trim());\n\n  return text;\n};\n","export const prepareUserLedgerData = (data) => {\n  return data.map((item) => {\n    return {\n      id: item.id,\n      stockSymbol: item.stock_name,\n      buyPrice: item.buy_price,\n      buyDate: item.buy_date,\n      quantity: item.quantity,\n      sellPrice: item.sell_price,\n      sellDate: item.sell_date,\n      brokerage: item.brokerage,\n      daysHold: item.days_hold,\n      reasonToBuy: item.reason_to_buy,\n      gttEnabled: item.gtt_enabled,\n      profitLoss: item.profit_loss,\n      amount: item.Amount,\n      annualReturnGenerated: item.annual_return_generated,\n      roce: item.roce,\n    };\n  });\n};\n","import React from \"react\";\n\nconst LedgerInsights = ({ textList }) => {\n  return (\n    <div className=\"insights-list-container\">\n      <div className=\"title\">AI Generated Insights</div>\n      <ul>\n        {textList.map((text, index) =>\n          text.length ? <li key={index}>{text}</li> : null\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default LedgerInsights;\n","import React from \"react\";\n\nconst ContentWrapper = ({ children, className }) => {\n  return (\n    <div className={`content-wrapper${className ? \" \" + className : \"\"}`}>\n      {children}\n    </div>\n  );\n};\n\nexport default ContentWrapper;\n","import Modal from \"@mui/material/Modal\";\n\nimport \"./styles.css\";\n\nconst ModalContainer = ({ open, handleClose, children, title }) => {\n  return (\n    <Modal open={open} onClose={handleClose}>\n      <div className=\"ledger-modal-body\">\n        <div className=\"modal-title\">{title}</div>\n        {children}\n      </div>\n    </Modal>\n  );\n};\n\nexport default ModalContainer;\n","import _ from \"lodash\";\nimport { getLabel } from \"../../../hooks/use-labels\";\nimport { useEffect, useState } from \"react\";\nimport { fetchInsightsWithAI } from \"./LedgerProducts/lib/api\";\n\nimport LedgerHeader from \"./LedgerHeader\";\nimport LedgerProducts from \"./LedgerProducts\";\nimport LedgerInsights from \"./LedgerInsights\";\nimport ContentWrapper from \"../../../components/ContentWrapper\";\nimport ModalContainer from \"../../../components/ModalContainer\";\nimport Box from \"@mui/material/Box\";\n\nimport \"./styles.css\";\nimport { useDispatch } from \"react-redux\";\nimport { getLedgerData } from \"../../../redux/reducers/public/public-action\";\n\nlet timer = null;\n\nconst Ledgers = () => {\n  const dispatch = useDispatch();\n  const [open, setOpen] = useState(false);\n  const [tableAction, setTableAction] = useState(null);\n  const [userData, setUserData] = useState(\"\");\n  const [insightsData, setInsightsData] = useState([]);\n  const [disabled, setDisabled] = useState(true);\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!_.isEmpty(userData)) {\n      setDisabled(false);\n      dispatch(getLedgerData(userData));\n      localStorage.setItem(\"ledgerData\", JSON.stringify(userData));\n    }\n  }, [userData, dispatch]);\n\n  const getInsightsWithAI = (userData) => {\n    toggle();\n    fetchInsightsWithAI(userData)\n      .then((response) => {\n        setInsightsData(response);\n      })\n      .catch(console.error);\n  };\n\n  const handleTableAction = (table) => {\n    timer = setTimeout(() => {\n      setTableAction(table);\n    }, 100);\n  };\n\n  const toggle = () => {\n    setOpen((prev) => !prev);\n  };\n\n  const renderModal = () => {\n    if (!open) return null;\n\n    const modalProps = {\n      open,\n      handleClose: toggle,\n      title: getLabel(\"insightAILabel\"),\n    };\n\n    return (\n      <ModalContainer {...modalProps}>\n        {insightsData.length ? (\n          <LedgerInsights textList={insightsData} />\n        ) : (\n          <div className=\"center-align\">Loading...</div>\n        )}\n      </ModalContainer>\n    );\n  };\n\n  return (\n    <Box\n      sx={{\n        width: \"100%\",\n        p: 2,\n        border: \"1px solid grey\",\n        maxWidth: \"auto\",\n        margin: \"auto\",\n        overflowX: \"auto\", // Horizontal scrolling\n        overflowY: \"false\", // No vertical scrolling\n      }}\n    >\n      <ContentWrapper className=\"ledgers-container\">\n        <LedgerHeader\n          table={tableAction}\n          getInsights={() => getInsightsWithAI(userData)}\n          disabled={disabled}\n        />\n        <LedgerProducts\n          tableAction={handleTableAction}\n          getUserData={setUserData}\n        />\n        {renderModal()}\n      </ContentWrapper>\n    </Box>\n  );\n};\n\nexport default Ledgers;\n","export const defaults = {\n  brandName: \"TradingJournal.ai\",\n\n  welcomeLabel: \"Welcome:\",\n  signOutLabel: \"Sign out\",\n\n  downloadCSVLabel: \"Download CSV\",\n  saveChangesLabel: \"Save Changes\",\n  getInsightsLabel: \"Get Insights with AI\",\n  insertNewRowLabel: \"INSERT NEW ROW\",\n\n  successLabel: \"Success!\",\n  deleteDateContent: \"Data deleted successfully!\",\n  okLabel: \"OK\",\n  saveDataContent: \"Data saved successfully!\",\n  areYouSureLabel: \"Are you sure?\",\n  cannotRevertLabel: \"You won't be able to revert this!\",\n  deleteLabel: \"Yes, delete it!\",\n\n  homeLabel: \"Home\",\n  riskManagementLabel: \"Risk Management\",\n  watchListLabel: \"Watchlist\",\n  analyticsLabel: \"Analytics\",\n  blogsLabel: \"Blogs\",\n\n  /** Header Navigation */\n  homeNavLinkLabel: \"Home\",\n  aboutUsNavLinkLabel: \"About Us\",\n  servicesNavLinkLabel: \"Services\",\n\n  /** About Us */\n  aboutUsFirstContent:\n    \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\",\n  aboutUsSecondContent:\n    \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\",\n};\n","let metadata;\n\nconst getMetaLabels = (metadata) => {\n  return metadata.filter(({ type }) => type === \"LABEL\");\n};\n\nconst getMetaStyles = (metadata) => {\n  return metadata.filter(({ type }) => type === \"STYLE\");\n};\n\nexport const setMetadata = (_metadata) => {\n  metadata = {};\n  const label = getMetaLabels(_metadata);\n  const style = getMetaStyles(_metadata);\n\n  metadata = {\n    ...(label.length && { label }),\n    ...(style.length && { style }),\n  };\n\n  localStorage.setItem(\"metadata\", JSON.stringify(metadata));\n};\n\nconst getMetadata = () => {\n  if (!metadata) {\n    metadata = JSON.parse(localStorage.getItem(\"metadata\") || \"{}\");\n  }\n  return metadata;\n};\n\nexport const styles = () => {\n  return getMetadata()?.style || [];\n};\n\nexport const labels = () => {\n  return getMetadata()?.label || [];\n};\n","import { getParameter } from \"../utils/common-utils\";\nimport { defaults } from \"../utils/defaults\";\nimport { labels } from \"../utils/metadata\";\n\nexport const getLabels = (keys) => {\n  const labelsData = {};\n  const labelInformations = labels();\n\n  keys.forEach((key) => {\n    let labelInfo = getParameter(labelInformations, key);\n\n    let data = labelInfo\n      ? labelInfo.values.length === 1\n        ? labelInfo.values[0]\n        : labelInfo.values\n      : defaults[key];\n\n    labelsData[key] = data;\n  });\n\n  return labelsData;\n};\n\nexport const useLabels = (keys) => {\n  return getLabels(keys);\n};\n\nexport const getLabel = (key) => {\n  const labelData = labels();\n  const labelInfo = getParameter(labelData, key);\n\n  return labelInfo\n    ? labelInfo.values.length === 1\n      ? labelInfo.values[0]\n      : labelInfo.values\n    : defaults[key];\n};\n"],"names":["_ref","title","text","btnLabel","iconType","Swal","icon","confirmButtonText","supabase","createClient","process","openAIConfig","apiKey","apiUrl","promptText","tableName","type","label","size","disable","onClick","htmlType","className","width","style","variant","hoverType","pixels","unit","styles","concat","_jsx","Button","id","startIcon","e","preventDefault","children","table","getInsights","disabled","_jsxs","LedgerButton","getLabel","AI","setCreatingRow","AddNewRow","console","log","Download","marginLeft","totalPercentageRate","setProfitLoss","fieldData","quantity","sellPrice","buyPrice","toFixed","setAmountInvested","setRoce","setBrokerage","setHoldDays","buyDate","sellDate","buy","Date","sell","diffTime","Math","abs","ceil","errorMessage","validateRequired","value","length","dateValidations","buy_date","sell_date","row","openModal","Box","sx","display","gap","Tooltip","IconButton","setEditingRow","color","EditIcon","DeleteIcon","items","onSubmit","onDelete","onEdit","invalidSellDate","sellDateFocused","tableAction","errors","setErrors","useState","columnNames","setColumnNames","loading","setLoading","useEffect","_","tableColumns","onColumnFocusHandler","validationErrors","focusedColumn","arguments","undefined","preparedColumns","prepareLedgerColumns","onColumnFocus","accessorKey","header","muiEditTextFieldProps","required","error","stockSymbol","helperText","onFocus","inputProps","min","reasonToBuy","editVariant","editSelectOptions","select","gttEnabled","enableEditing","columns","useMemo","handleCreateProduct","values","newValidationErrors","product","Object","some","openDeleteConfirmModal","showCancelButton","confirmButtonColor","cancelButtonColor","then","result","isConfirmed","useMaterialReactTable","data","enableColumnOrdering","createDisplayMode","editDisplayMode","initialState","density","columnPinning","left","getRowId","muiTableContainerProps","border","muiTableHeadCellProps","backgroundColor","minWidth","alignContent","muiColumnActionsButtonProps","borderRight","borderRadius","muiTableBodyCellProps","muiTopToolbarProps","muiBottomToolbarProps","onActionCellChange","onCreatingRowCancel","onCreatingRowSave","_ref2","onEditingRowCancel","onEditingRowSave","_ref3","renderRowActions","_ref4","TableActions","renderTopToolbarCustomActions","_ref5","MaterialReactTable","getUserData","user_uuid","getStorageStringItem","userIdKey","productList","setProductList","userUUID","useSelector","state","public","validSellDate","setValidSellDate","userID","setUserID","getLedgerProductList","async","from","eq","userId","order","ascending","fetchUserLedgerData","JSON","stringify","preparedData","map","item","stock_name","buy_price","sell_price","brokerage","daysHold","days_hold","reason_to_buy","gtt_enabled","profitLoss","profit_loss","amount","Amount","annualReturnGenerated","annual_return_generated","roce","prepareUserLedgerData","onFinishHandler","action","rowData","getSubmissionData","parseFloat","user_id","onUpdate","insert","formData","postUserLedgerData","response","SwalNotification","catch","dataID","updatedData","updateData","update","match","updateUserLedgerData","LPListing","delete","deleteUserLedgerData","currentList","filter","textList","index","open","handleClose","Modal","onClose","timer","Ledgers","dispatch","useDispatch","setOpen","setTableAction","userData","setUserData","insightsData","setInsightsData","setDisabled","clearTimeout","getLedgerData","localStorage","setItem","getInsightsWithAI","toggle","requestBody","prompt","max_tokens","fetch","method","headers","body","json","choices","split","line","trim","fetchInsightsWithAI","prev","p","maxWidth","margin","overflowX","overflowY","ContentWrapper","LedgerHeader","LedgerProducts","setTimeout","renderModal","modalProps","ModalContainer","LedgerInsights","defaults","brandName","welcomeLabel","signOutLabel","downloadCSVLabel","saveChangesLabel","getInsightsLabel","insertNewRowLabel","successLabel","deleteDateContent","okLabel","saveDataContent","areYouSureLabel","cannotRevertLabel","deleteLabel","homeLabel","riskManagementLabel","watchListLabel","analyticsLabel","blogsLabel","homeNavLinkLabel","aboutUsNavLinkLabel","servicesNavLinkLabel","aboutUsFirstContent","aboutUsSecondContent","metadata","getMetadata","parse","getItem","labels","_getMetadata2","useLabels","keys","labelsData","labelInformations","forEach","key","labelInfo","getParameter","getLabels","labelData"],"sourceRoot":""}