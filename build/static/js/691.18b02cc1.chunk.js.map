{"version":3,"file":"static/js/691.18b02cc1.chunk.js","mappings":"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","sources":["config/index_supabase.js","components/KanbanBoard/TaskCard.tsx","components/KanbanBoard/Column.tsx","containers/Main/BlogPosts/index.js","containers/Main/Ledgers/LedgerProducts/lib/api.js","ui-kit/Buttons/LedgerButton/index.js"],"sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\n\nexport const supabase = createClient(\n  process.env.REACT_APP_SUPABASE_URL,\n  process.env.REACT_APP_SUPABASE_ANON_KEY\n);\n\nexport const openAIConfig = {\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  apiUrl: process.env.REACT_APP_OPENAI_URL,\n  promptText: process.env.REACT_APP_OPENAI_API_PROMPT,\n};\n\nexport const tableName = process.env.REACT_APP_SUPABASE_TABLE_NAME;\nexport const watchlistTableName =\n  process.env.REACT_APP_SUPABASE_WATCHLIST_TABLE_NAME;\nexport const stateTableName = process.env.REACT_APP_SUPABASE_STATUS_TABLE_NAME;\n","import { useDraggable } from '@dnd-kit/core';\nimport { Task } from './types';\nimport React from 'react';\n\ntype TaskCardProps = {\n  task: Task;\n  onClick?: () => void; // Add optional onClick prop\n};\n\nexport function TaskCard({ task, onClick }: TaskCardProps) {\n  const { attributes, listeners, setNodeRef, transform } = useDraggable({\n    id: task.id,\n  });\n\n  const style = transform\n    ? {\n        transform: `translate(${transform.x}px, ${transform.y}px)`,\n      }\n    : undefined;\n\n  return (\n    <div\n      ref={setNodeRef}\n      {...listeners}\n      {...attributes}\n     \n      className=\"cursor-grab rounded-lg bg-neutral-700 p-4 shadow-sm hover:shadow-md\"\n      style={style}\n    >\n      <h3 className=\"font-medium text-neutral-100 underline cursor-pointer\"  onClick={() => {\n        onClick && onClick();\n      }}>\n        {task.title}\n      </h3>\n      <p className=\"mt-2 text-sm text-neutral-400\">{task.description}</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Column as ColumnType, Task } from \"./types\";\nimport { TaskCard } from \"./TaskCard\";\nimport { useDroppable } from \"@dnd-kit/core\";\n\ntype ColumnProps = {\n  column: ColumnType;\n  tasks: Task[];\n  onTaskClick?: (task: Task) => void; // Define onTaskClick\n};\n\nexport function Column({ column, tasks, onTaskClick }: ColumnProps) {\n  const { setNodeRef } = useDroppable({\n    id: column.id, // Sets the droppable ID to the column's ID\n  });\n\n  return (\n    <div className=\"flex w-80 flex-col rounded-lg bg-neutral-800 p-4\">\n      <h2 className=\"mb-4 font-semibold text-neutral-100\">{column.title}</h2>\n      <div ref={setNodeRef} className=\"flex flex-1 flex-col gap-4\">\n        {tasks.length === 0 ? (\n          <div className=\"flex items-center justify-center text-neutral-400\">\n            Drop tasks here\n          </div>\n        ) : (\n          tasks.map((task) => (\n            <TaskCard\n              key={task.id}\n              task={task}\n              onClick={() => onTaskClick && onTaskClick(task)} // Pass click handler\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  DndContext,\n  useSensor,\n  useSensors,\n  PointerSensor,\n} from \"@dnd-kit/core\";\nimport { useSelector } from \"react-redux\"; // Import useSelector\nimport { Column } from \"../../../components/KanbanBoard/Column.tsx\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"@mui/material/Modal\";\nimport LedgerButton from \"../../../ui-kit/Buttons/LedgerButton/index.js\";\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\nimport {\n  fetchWatchlistData,\n  postWatchListData,\n  updateCardStatus,\n} from \"../../../containers/Main/Ledgers/LedgerProducts/lib/api.js\";\n\nconst COLUMNS = [\n  { id: \"To Watch\", title: \"To Watch\" },\n  { id: \"Researching\", title: \"Researching\" },\n  { id: \"Ready To Buy\", title: \"Ready To Buy\" },\n  { id: \"Bought\", title: \"Bought\" },\n  { id: \"Ready To Sell\", title: \"Ready To Sell\" },\n];\n\nconst BlogPosts = () => {\n  const [tasks, setTasks] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [newTask, setNewTask] = useState({\n    title: \"\",\n    description: \"\",\n    status: COLUMNS[0].id, // Default to the first status\n  });\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: { delay: 150, tolerance: 5 },\n    })\n  );\n\n  const { userUUID } = useSelector((state) => state.public);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!userUUID) return; // Ensure userUUID is available\n      try {\n        const { data, error } = await fetchWatchlistData(userUUID);\n        if (error) {\n          console.error(\"Error fetching watchlist data:\", error);\n        } else {\n          setTasks(data || []);\n        }\n      } catch (err) {\n        console.error(\"Unexpected error fetching watchlist data:\", err);\n      }\n    };\n\n    fetchData();\n  }, [userUUID]);\n\n  const handleDragEnd = async (event) => {\n    const { active, over } = event;\n\n    if (!over || !over.id) return;\n\n    const taskId = active.id;\n    const newStatus = over.id;\n\n    if (taskId && newStatus) {\n      setTasks((prevTasks) =>\n        prevTasks.map((task) =>\n          task.id === taskId ? { ...task, status: newStatus } : task\n        )\n      );\n\n      const result = await updateCardStatus(taskId, newStatus);\n\n      if (!result.success) {\n        alert(\"Failed to update status in database. Reverting changes.\");\n        setTasks((prevTasks) =>\n          prevTasks.map((task) =>\n            task.id === taskId\n              ? { ...task, status: tasks.find((t) => t.id === taskId).status }\n              : task\n          )\n        );\n      }\n    }\n  };\n\n  const handleAddNewStock = () => {\n    setModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setNewTask({\n      title: \"\",\n      description: \"\",\n      status: COLUMNS[0].id,\n    });\n  };\n\n  const handleCardClick = (task) => {\n    console.log(\"Card clicked: \", task); \n    setNewTask({\n      title: task.title,\n      description: task.description,\n      status: task.status,\n    });\n    setModalOpen(true);\n  };\n\n  const handleFieldChange = (e) => {\n    const { name, value } = e.target;\n    setNewTask((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleAddTask = async () => {\n    if (!userUUID) {\n      alert(\"User not identified. Please try again.\");\n      return;\n    }\n\n    const taskData = { ...newTask, id: Date.now().toString(), userUUID };\n\n    try {\n      const { data, error } = await postWatchListData(taskData);\n\n      if (error) {\n        console.error(\"Error adding task to ledger:\", error);\n        alert(\"Failed to add task. Please try again.\");\n        return;\n      }\n\n      setTasks((prevTasks) => [...prevTasks, taskData]);\n      handleCloseModal();\n    } catch (err) {\n      console.error(\"Unexpected error:\", err);\n      alert(\"An unexpected error occurred. Please try again.\");\n    }\n  };\n\n  return (\n    <Box sx={{ padding: 2 }}>\n      <Box\n        sx={{\n          display: \"flex\",\n          justifyContent: \"flex-start\",\n          marginBottom: 2,\n        }}\n      >\n        <LedgerButton\n          label=\"Add New Stock\"\n          type=\"outlined\"\n          variant=\"contained\"\n          className=\"ledger-buttons get-insights\"\n          hoverType=\"success-color\"\n          size=\"sm\"\n          icon={<AddCircleOutlineIcon />}\n          style={{\n            width: \"auto\",\n            padding: \"8px 16px\",\n          }}\n          onClick={handleAddNewStock}\n        />\n      </Box>\n\n      <DndContext sensors={sensors} onDragEnd={handleDragEnd}>\n        <Box\n          sx={{\n            display: \"flex\",\n            overflowX: \"auto\",\n            gap: 3,\n          }}\n        >\n          {COLUMNS.map((column) => (\n            <Box key={column.id} sx={{ minWidth: 300 }}>\n              <Column\n                column={column}\n                tasks={tasks.filter((task) => task.status === column.id)}\n                onCardClick={handleCardClick}\n              />\n            </Box>\n          ))}\n        </Box>\n      </DndContext>\n\n      <Modal\n        open={modalOpen}\n        onClose={handleCloseModal}\n        aria-labelledby=\"add-new-stock-modal\"\n        aria-describedby=\"add-new-stock-form\"\n      >\n        <Box\n          sx={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            width: 400,\n            bgcolor: \"background.paper\",\n            border: \"1px solid #ddd\",\n            borderRadius: \"8px\",\n            boxShadow: 24,\n            p: 4,\n          }}\n        >\n          <Typography variant=\"h6\" gutterBottom>\n            {newTask.title ? \"Edit Stock\" : \"Add New Stock\"}\n          </Typography>\n          <TextField\n            fullWidth\n            label=\"Stock Name\"\n            name=\"title\"\n            value={newTask.title}\n            onChange={handleFieldChange}\n            margin=\"normal\"\n          />\n          <TextField\n            fullWidth\n            label=\"Description\"\n            name=\"description\"\n            value={newTask.description}\n            onChange={handleFieldChange}\n            margin=\"normal\"\n            multiline\n            rows={3}\n          />\n          <Box mt={2} display=\"flex\" justifyContent=\"space-between\">\n            <Button variant=\"contained\" color=\"primary\" onClick={handleAddTask}>\n              Save\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={handleCloseModal}\n            >\n              Cancel\n            </Button>\n          </Box>\n        </Box>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default BlogPosts;\n","import {\n  supabase,\n  tableName,\n  openAIConfig,\n  watchlistTableName,\n  stateTableName,\n} from \"../../../../../config/index_supabase\";\n\nexport const fetchUserLedgerData = async (userId) => {\n  return await supabase\n    .from(tableName)\n    .select()\n    .eq(\"user_id\", userId)\n    .order(\"buy_date\", { ascending: true });\n};\n\nexport const postUserLedgerData = async (formData) => {\n  return await supabase.from(tableName).insert(formData);\n};\n\nexport const deleteUserLedgerData = async (dataID) => {\n  return await supabase.from(tableName).delete().match({ id: dataID });\n};\n\nexport const updateUserLedgerData = async (dataID, updateData) => {\n  return await supabase\n    .from(tableName)\n    .update(updateData)\n    .match({ id: dataID });\n};\n\nexport const fetchInsightsWithAI = async (formData) => {\n  const requestBody = {\n    messages: [\n      {\n        role: \"system\",\n        content: `With json data ${JSON.stringify(formData)}, ${\n          openAIConfig.promptText\n        }`,\n      },\n    ],\n    max_tokens: Math.min(formData.length, 1000),\n    temperature: 0.7, // Adjust the temperature as needed\n    frequency_penalty: 0, // Adjust the frequency penalty as needed\n    presence_penalty: 0, // Adjust the presence penalty as needed\n    top_p: 0.95, // Adjust top_p as needed\n    stop: null, // Set stop to null or any specific stop sequence if needed\n  };\n\n  const response = await fetch(openAIConfig.apiUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"api-key\": openAIConfig.apiKey,\n      \"Cache-Control\": \"no-cache\",\n    },\n    body: JSON.stringify(requestBody),\n  });\n\n  const data = await response.json();\n\n  // Extract the content from the response\n  const text = data.choices[0].message.content\n    .split(\"\\n\")\n    .map((line) => line.trim());\n\n  return text;\n};\n\nexport const postWatchListData = async (formData) => {\n\n  return await supabase.from(watchlistTableName).insert(formData);\n};\n\nexport const fetchWatchlistData = async (userId) => {\n  try {\n    const { data, error } = await supabase\n      .from(watchlistTableName)\n      .select(\"*\") // Specify the columns you want to fetch\n      .eq(\"userUUID\", userId); // Ensure the filter is applied based on the userUUID\n\n    if (error) {\n      console.error(\"Error fetching watchlist data:\", error);\n      return { data: null, error };\n    }\n\n    return { data, error: null };\n  } catch (err) {\n    console.error(\"Unexpected error fetching watchlist data:\", err);\n    return { data: null, error: err };\n  }\n};\n\n\n\nexport const updateCardStatus = async (taskId, newStatus) => {\n  try {\n    const { error } = await supabase\n      .from(watchlistTableName) // Replace \"watchlist\" with your actual table name\n      .update({ status: newStatus }) // Update the status field\n      .eq(\"id\", taskId); // Match the card by its id\n\n    if (error) {\n      console.error(\"Error updating status in database:\", error);\n      return { success: false, error };\n    }\n\n    return { success: true };\n  } catch (err) {\n    console.error(\"Unexpected error updating status:\", err);\n    return { success: false, error: err };\n  }\n};\n\n","import { Button } from \"@mui/material\";\nimport React from \"react\";\n\nconst LedgerButton = ({\n  type,\n  label,\n  size = \"lg\",\n  disable = false,\n  onClick,\n  htmlType = null,\n  className,\n  icon,\n  width,\n  style,\n  variant,\n  hoverType,\n}) => {\n  const { pixels, unit } = width || { pixels: null, unit: null };\n\n  const styles = {\n    width:\n      width && typeof width === \"object\" ? `${pixels}${unit}` : `${width}px`,\n    ...style,\n    backgroundColor: \"#38b88d\",\n  };\n\n  return (\n    <Button\n      type={htmlType}\n      id={label}\n      startIcon={icon}\n      className={`${className} button-box-shadow ledger-button button-${\n        size ? size : \"default\"\n      } ${!disable ? `${type}-enabled` : `${type}-disabled`}${\n        hoverType ? \" \" + hoverType : \"\"\n      }`}\n      onClick={(e) => {\n        e.preventDefault();\n        !disable && onClick && onClick(e);\n      }}\n      style={{ ...styles }}\n      variant={variant}\n      disabled={disable}\n    >\n      {label && label}\n    </Button>\n  );\n};\n\nexport default LedgerButton;\n"],"names":["supabase","createClient","process","openAIConfig","apiKey","apiUrl","promptText","tableName","watchlistTableName","TaskCard","_ref","task","onClick","attributes","listeners","setNodeRef","transform","useDraggable","id","style","concat","x","y","undefined","_jsxs","ref","className","children","_jsx","title","description","Column","column","tasks","onTaskClick","useDroppable","length","map","COLUMNS","BlogPosts","setTasks","useState","modalOpen","setModalOpen","newTask","setNewTask","status","sensors","useSensors","useSensor","PointerSensor","activationConstraint","delay","tolerance","userUUID","useSelector","state","public","useEffect","async","data","error","fetchWatchlistData","console","err","fetchData","handleCloseModal","handleCardClick","log","handleFieldChange","e","name","value","target","prev","Box","sx","padding","display","justifyContent","marginBottom","LedgerButton","label","type","variant","hoverType","size","icon","AddCircleOutlineIcon","width","handleAddNewStock","DndContext","onDragEnd","active","over","event","taskId","newStatus","prevTasks","updateCardStatus","success","alert","find","t","overflowX","gap","minWidth","filter","onCardClick","Modal","open","onClose","position","top","left","bgcolor","border","borderRadius","boxShadow","p","Typography","gutterBottom","TextField","fullWidth","onChange","margin","multiline","rows","mt","Button","color","taskData","Date","now","toString","postWatchListData","fetchUserLedgerData","from","select","eq","userId","order","ascending","postUserLedgerData","insert","formData","deleteUserLedgerData","delete","match","dataID","updateUserLedgerData","updateData","update","fetchInsightsWithAI","requestBody","messages","role","content","JSON","stringify","max_tokens","Math","min","temperature","frequency_penalty","presence_penalty","top_p","stop","response","fetch","method","headers","body","json","choices","message","split","line","trim","disable","htmlType","pixels","unit","styles","backgroundColor","startIcon","preventDefault","disabled"],"sourceRoot":""}