{"version":3,"file":"static/js/379.38bf8c03.chunk.js","mappings":"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","sources":["components/SwalNotification/index.js","config/index_supabase.js","containers/Main/Ledgers/LedgerHeader/index.js","containers/Main/Ledgers/LedgerProducts/hooks.js","utils/validation.js","containers/Main/Ledgers/LedgerProducts/ledger-validations.js","containers/Main/Ledgers/LedgerProducts/LPListing/TableActions/index.js","containers/Main/Ledgers/LedgerProducts/LPListing/index.js","containers/Main/Ledgers/LedgerProducts/LPListing/lp-listing-utils.js","containers/Main/Ledgers/LedgerProducts/index.js","containers/Main/Ledgers/LedgerProducts/lib/api.js","containers/Main/Ledgers/LedgerProducts/ledger-products-utils.js","containers/Main/Ledgers/LedgerInsights/index.js","components/ContentWrapper/index.js","components/ModalContainer/index.js","containers/Main/Ledgers/index.js","utils/defaults.js","utils/metadata.js","hooks/use-labels.js","ui-kit/Buttons/LedgerButton/index.js"],"sourcesContent":["import Swal from \"sweetalert2\";\n\nconst SwalNotification = ({ title, text, btnLabel, iconType }) => {\n  return Swal.fire({\n    title,\n    text,\n    icon: iconType,\n    confirmButtonText: btnLabel,\n  });\n};\n\nexport default SwalNotification;\n","import { createClient } from \"@supabase/supabase-js\";\n\nexport const supabase = createClient(\n  process.env.REACT_APP_SUPABASE_URL,\n  process.env.REACT_APP_SUPABASE_ANON_KEY\n);\n\nexport const openAIConfig = {\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  apiUrl: process.env.REACT_APP_OPENAI_URL,\n  promptText: process.env.REACT_APP_OPENAI_API_PROMPT,\n};\n\nexport const tableName = process.env.REACT_APP_SUPABASE_TABLE_NAME;\n","import React from \"react\";\nimport { getLabel } from \"../../../../hooks/use-labels\";\n\nimport AI from \"@mui/icons-material/AutoFixHighOutlined\";\nimport Download from \"@mui/icons-material/DownloadOutlined\";\nimport AddNewRow from \"@mui/icons-material/AddToPhotosOutlined\";\nimport LedgerButton from \"../../../../ui-kit/Buttons/LedgerButton\";\n\nconst LedgerHeader = ({ table, getInsights, disabled }) => {\n  return (\n    <div className=\"ledger-header-container\">\n      <LedgerButton\n        label={getLabel(\"getInsightsLabel\")}\n        type=\"outlined\"\n        variant=\"contained\"\n        className=\"ledger-buttons get-insights\"\n        onClick={() => !disabled && getInsights()}\n        hoverType=\"success-color\"\n        size=\"md\"\n        disable={disabled}\n        icon={<AI></AI>}\n      />\n\n      <LedgerButton\n        type=\"outlined\"\n        variant=\"contained\"\n        className=\"ledger-buttons create-row\"\n        onClick={() => {\n          table.setCreatingRow(true);\n        }}\n        label={getLabel(\"insertNewRowLabel\")}\n        size=\"md\"\n        icon={<AddNewRow></AddNewRow>}\n      />\n\n      <LedgerButton\n        label={getLabel(\"downloadCSVLabel\")}\n        type=\"outlined\"\n        variant=\"contained\"\n        className=\"ledger-buttons download-csv\"\n        onClick={() => console.log(\"download-csv\")}\n        hoverType=\"primary-color\"\n        size=\"md\"\n        icon={<Download></Download>}\n        style={{ marginLeft: \"auto\" }}\n      />\n    </div>\n  );\n};\n\nexport default LedgerHeader;\n","const totalPercentageRate =\n  0.001 + 0.0000325 + 0.00000001 + 0.18 * (0.0000325 + 0.00000001) + 0.00015;\n\nexport const getSubmissionData = (fieldData, userUUID) => {\n  return [\n    {\n      stock_name: fieldData.stockSymbol,\n      buy_price: parseFloat(fieldData.buyPrice),\n      buy_date: fieldData.buyDate,\n      quantity: parseFloat(fieldData.quantity),\n      sell_price: parseFloat(fieldData.sellPrice),\n      sell_date: fieldData.sellDate,\n      brokerage: parseFloat(setBrokerage(fieldData)).toFixed(2),\n      days_hold: setHoldDays(fieldData),\n      reason_to_buy: fieldData.reasonToBuy,\n      gtt_enabled: fieldData.gttEnabled,\n      profit_loss: setProfitLoss(fieldData),\n      roce: parseFloat(setRoce(fieldData)).toFixed(2),\n      annual_return_generated: parseFloat(fieldData.annualReturnGenerated),\n      Amount: setAmountInvested(fieldData),\n      user_id: userUUID,\n    },\n  ];\n};\n\nconst setProfitLoss = (fieldData) => {\n  const { quantity, sellPrice, buyPrice } = fieldData;\n\n  const sellQty = sellPrice * quantity;\n  const buyQty = buyPrice * quantity;\n\n  const profitLoss = (sellQty - buyQty).toFixed(2);\n\n  return profitLoss;\n};\n\nconst setAmountInvested = (fieldData) => {\n  const { buyPrice, quantity } = fieldData;\n  const buyQty = buyPrice * quantity;\n\n  return buyQty.toFixed(2);\n};\n\nconst setRoce = (fieldData) => {\n  return (setProfitLoss(fieldData) / setAmountInvested(fieldData)) * 100;\n};\n\nconst setBrokerage = (fieldData) => {\n  const { buyPrice, quantity, sellPrice } = fieldData;\n  const buyQty = buyPrice * quantity;\n  const sellQty = sellPrice * quantity;\n\n  return buyQty * totalPercentageRate + sellQty * totalPercentageRate + 15.93;\n};\n\nconst setHoldDays = (fieldData) => {\n  const { buyDate, sellDate } = fieldData;\n\n  const buy = new Date(buyDate);\n  const sell = new Date(sellDate);\n\n  const diffTime = Math.abs(sell - buy);\n\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n  return diffDays;\n};\n","export const errorMessage = {\n  stockSymbol: \"Stock name is Required\",\n  buyPrice: \"Buying price is Required\",\n  buyDate: \"Buy date is Required\",\n  quantity: \"Quantity is Require\",\n  sellPrice: \"Sell price is Require\",\n  sellDate: \"Sell date is Required\",\n  brokerage: \"Brokerage is Required\",\n  daysHold: \"Days hold is Required\",\n  reasonToBuy: \"Reason to buy is Required\",\n  gttEnabled: \"GTT enabled is Required\",\n  profitLoss: \"Profit Loss is Required\",\n  amount: \"Amount is Required\",\n  annualReturnGenerated: \"Annual Return Generated is Required\",\n  roce: \"Roce is Required\",\n  lessSellDate: \"Sell date cannot be less than buy date.\",\n};\n","import { errorMessage } from \"../../../../utils/validation\";\n\nconst validateRequired = (value) => !!value.length;\n\nexport const ledgerProdcutValidation = (product) => {\n  return {\n    stockSymbol:\n      !validateRequired(product.stockSymbol) && errorMessage.stockSymbol,\n    buyPrice: !validateRequired(product.buyPrice) && errorMessage.buyPrice,\n    buyDate: !validateRequired(product.buyDate) && errorMessage.buyDate,\n    quantity: !validateRequired(product.quantity) && errorMessage.quantity,\n    sellPrice: !validateRequired(product.sellPrice) && errorMessage.sellPrice,\n    sellDate: !validateRequired(product.sellDate) && errorMessage.sellDate,\n    reasonToBuy:\n      !validateRequired(product.reasonToBuy) && errorMessage.reasonToBuy,\n    gttEnabled:\n      !validateRequired(product.gttEnabled) && errorMessage.gttEnabled,\n  };\n};\n\nexport const dateValidations = ({ buy_date, sell_date }) => {\n  const buyDate = new Date(buy_date);\n  const sellDate = new Date(sell_date);\n\n  if (buyDate > sellDate) {\n    return false;\n  }\n\n  return true;\n};\n","import React from \"react\";\nimport { Box, IconButton, Tooltip } from \"@mui/material\";\n\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nconst TableActions = ({ table, row, openModal }) => {\n  return (\n    <Box sx={{ display: \"flex\", gap: \"1rem\" }}>\n      <Tooltip title=\"Edit\">\n        <IconButton onClick={() => table.setEditingRow(row)} color=\"success\">\n          <EditIcon />\n        </IconButton>\n      </Tooltip>\n      <Tooltip title=\"Delete\">\n        <IconButton color=\"error\" onClick={() => openModal(row)}>\n          <DeleteIcon />\n        </IconButton>\n      </Tooltip>\n    </Box>\n  );\n};\n\nexport default TableActions;\n","import _ from \"lodash\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { prepareLedgerColumns } from \"./lp-listing-utils\";\nimport { getLabel } from \"../../../../../hooks/use-labels\";\nimport { errorMessage } from \"../../../../../utils/validation\";\nimport { ledgerProdcutValidation } from \"../ledger-validations\";\nimport {\n  MaterialReactTable,\n  useMaterialReactTable,\n} from \"material-react-table\";\n\nimport Swal from \"sweetalert2\";\nimport TableActions from \"./TableActions\";\n\nconst LPListing = ({\n  items,\n  onSubmit,\n  onDelete,\n  onEdit,\n  invalidSellDate,\n  sellDateFocused,\n  tableAction,\n}) => {\n  const [errors, setErrors] = useState({});\n  const [columnNames, setColumnNames] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (invalidSellDate) {\n      setErrors({\n        ...errors,\n        sellDate: errorMessage.lessSellDate,\n      });\n    }\n  }, [invalidSellDate, errors]);\n\n  useEffect(() => {\n    if (_.isEmpty(columnNames)) {\n      setLoading(true);\n\n      tableColumns(errors);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [columnNames, errors]);\n\n  useEffect(() => {\n    if (!_.isEmpty(errors)) {\n      tableColumns(errors);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [errors]);\n\n  const onColumnFocusHandler = (validationErrors, focusedColumn = \"\") => {\n    setErrors({\n      ...validationErrors,\n    });\n\n    if (focusedColumn === \"sellDate\" && invalidSellDate) {\n      sellDateFocused();\n      setErrors({\n        ...validationErrors,\n        sellDate: undefined,\n      });\n    }\n  };\n\n  const tableColumns = (validationErrors) => {\n    const preparedColumns = prepareLedgerColumns(\n      validationErrors,\n      onColumnFocusHandler\n    );\n    setColumnNames(preparedColumns);\n    setLoading(false);\n  };\n\n  const columns = useMemo(() => columnNames, [columnNames]);\n\n  const handleCreateProduct = (values, table) => {\n    const newValidationErrors = ledgerProdcutValidation(values);\n    if (Object.values(newValidationErrors).some((error) => error)) {\n      setErrors(newValidationErrors);\n      return;\n    }\n    setErrors({});\n    onSubmit(values, \"insert\", table);\n  };\n\n  const openDeleteConfirmModal = (row) => {\n    Swal.fire({\n      title: getLabel(\"areYouSureLabel\"),\n      text: getLabel(\"cannotRevertLabel\"),\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: getLabel(\"deleteLabel\"),\n    }).then((result) => {\n      if (result.isConfirmed) {\n        const { id } = row;\n        onDelete(id);\n      }\n    });\n  };\n\n  const table = useMaterialReactTable({\n    columns,\n    data: items,\n    enableColumnOrdering: true,\n    createDisplayMode: \"row\",\n    editDisplayMode: \"row\",\n    enableEditing: true,\n    initialState: {\n      density: \"compact\",\n      columnPinning: { left: [\"stockSymbol\"] },\n    },\n    getRowId: (row) => row.id,\n    muiTableContainerProps: {\n      sx: {\n        border: \"1px solid rgba(81, 81, 81, .5)\",\n      },\n    },\n    //Table Column names\n    muiTableHeadCellProps: {\n      sx: {\n        color: \"white\",\n        backgroundColor: \"#403d3d\",\n        minWidth: \"50px\",\n        alignContent: \"center\",\n      },\n    },\n    muiColumnActionsButtonProps: {\n      sx: {\n        color: \"white\",\n        borderRight: \"2px solid white\",\n        borderRadius: \"0\",\n      },\n    },\n\n    //Actual Content of table\n    muiTableBodyCellProps: {\n      sx: {\n        border: \"3\",\n        backgroundColor: \"#d0d5db\",\n        color: \"#000000\",\n      },\n    },\n    //Top Right corner buttons like search, density\n    muiTopToolbarProps: {\n      sx: {\n        backgroundColor: \"#000000\",\n        color: \"#fff\",\n        \"& .MuiIconButton-root\": {\n          color: \"white\",\n        },\n      },\n    },\n    muiBottomToolbarProps: {\n      className: \"custom-footer\",\n      sx: {\n        backgroundColor: \"#000000\",\n        color: \"#fff\",\n        \"& .MuiIconButton-root,.MuiBox-root label, .MuiBox-root div,.MuiSvgIcon-root\":\n          {\n            color: \"white\",\n          },\n      },\n    },\n\n    onActionCellChange: () => console.log(\"1\"),\n    onCreatingRowCancel: () => setErrors({}),\n    onCreatingRowSave: ({ values, table }) =>\n      handleCreateProduct(values, table),\n    onEditingRowCancel: () => setErrors({}),\n    onEditingRowSave: ({ values, table }) => onEdit(values, \"update\", table),\n    renderRowActions: ({ row, table }) => (\n      <TableActions\n        table={table}\n        row={row}\n        openModal={openDeleteConfirmModal}\n      />\n    ),\n    renderTopToolbarCustomActions: ({ table }) => tableAction(table),\n  });\n\n  if (loading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"ledger-product-listing-container\">\n      <MaterialReactTable table={table} />\n    </div>\n  );\n};\n\nexport default LPListing;\n","export const prepareLedgerColumns = (validationErrors, onColumnFocus) => {\n  return [\n    {\n      accessorKey: \"stockSymbol\",\n      header: \"Stock Symbol\",\n      muiEditTextFieldProps: {\n        type: \"string\",\n        required: true,\n        error: !!validationErrors?.stockSymbol,\n        helperText: validationErrors?.stockSymbol,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            stockSymbol: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"buyPrice\",\n      header: \"Buy Price\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        required: true,\n        inputProps: { min: 0 },\n        error: !!validationErrors?.buyPrice,\n        helperText: validationErrors?.buyPrice,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            buyPrice: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"buyDate\",\n      header: \"Buy Date\",\n      muiEditTextFieldProps: {\n        type: \"date\",\n        required: true,\n        error: !!validationErrors?.buyDate,\n        helperText: validationErrors?.buyDate,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            buyDate: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"quantity\",\n      header: \"Quantity\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        required: true,\n        inputProps: { min: 0 },\n        error: !!validationErrors?.quantity,\n        helperText: validationErrors?.quantity,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            quantity: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"reasonToBuy\",\n      header: \"Reason to Buy\",\n      muiEditTextFieldProps: {\n        type: \"string\",\n        required: true,\n        error: !!validationErrors?.reasonToBuy,\n        helperText: validationErrors?.reasonToBuy,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            reasonToBuy: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"sellPrice\",\n      header: \"Sell Price\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        required: true,\n        inputProps: { min: 0 },\n        error: !!validationErrors?.sellPrice,\n        helperText: validationErrors?.sellPrice,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            sellPrice: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"sellDate\",\n      header: \"Sell Date\",\n      muiEditTextFieldProps: {\n        type: \"date\",\n        required: true,\n        error: !!validationErrors?.sellDate,\n        helperText: validationErrors?.sellDate,\n        onFocus: () =>\n          onColumnFocus(\n            {\n              ...validationErrors,\n              sellDate: undefined,\n            },\n            \"sellDate\"\n          ),\n      },\n    },\n\n    {\n      accessorKey: \"gttEnabled\",\n      header: \"GTT Enabled\",\n      editVariant: \"select\",\n      editSelectOptions: [\"YES\", \"NO\"],\n      muiEditTextFieldProps: {\n        select: true,\n        error: !!validationErrors?.gttEnabled,\n        helperText: validationErrors?.gttEnabled,\n        onFocus: () =>\n          onColumnFocus({\n            ...validationErrors,\n            gttEnabled: undefined,\n          }),\n      },\n    },\n    {\n      accessorKey: \"brokerage\",\n      header: \"Brokerage\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"daysHold\",\n      header: \"Days Hold\",\n      muiEditTextFieldProps: {\n        type: \"string\",\n        disabled: true,\n      },\n    },\n\n    {\n      accessorKey: \"profitLoss\",\n      header: \"Profit / Loss\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"amount\",\n      header: \"Amount Invested\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"annualReturnGenerated\",\n      header: \"Annual Return Generated\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"roce\",\n      header: \"Roce\",\n      muiEditTextFieldProps: {\n        type: \"number\",\n        disabled: true,\n      },\n    },\n    {\n      accessorKey: \"id\",\n      header: \"ID\",\n      enableEditing: false,\n      size: 80,\n    },\n  ];\n};\n","import _ from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { userIdKey } from \"../../../../constants.js\";\nimport { getSubmissionData } from \"./hooks.js\";\nimport { useSelector } from \"react-redux\";\nimport { getLabel } from \"../../../../hooks/use-labels.js\";\nimport { dateValidations } from \"./ledger-validations.js\";\nimport { prepareUserLedgerData } from \"./ledger-products-utils.js\";\nimport { getStorageStringItem } from \"../../../../utils/common-utils.js\";\nimport {\n  deleteUserLedgerData,\n  fetchUserLedgerData,\n  postUserLedgerData,\n  updateUserLedgerData,\n} from \"./lib/api.js\";\n\nimport LPListing from \"./LPListing\";\n\nimport SwalNotification from \"../../../../components/SwalNotification/index.js\";\n\nconst LedgerProducts = ({ tableAction, getUserData }) => {\n  const user_uuid = getStorageStringItem(userIdKey);\n  const [productList, setProductList] = useState([]);\n  const { userUUID } = useSelector((state) => state.public);\n  const [validSellDate, setValidSellDate] = useState(false);\n\n  const [userID, setUserID] = useState(\"\");\n\n  useEffect(() => {\n    if (userUUID || user_uuid) setUserID(userUUID || user_uuid);\n  }, [userUUID, user_uuid]);\n\n  useEffect(() => {\n    if (userID) getLedgerProductList(userID, getUserData);\n  }, [userID, getUserData]);\n\n  const getLedgerProductList = async (userID, getUserData) => {\n    fetchUserLedgerData(userID).then(({ data, error }) => {\n      if (error) {\n        console.log(error);\n        return;\n      }\n\n      getUserData(JSON.stringify(data));\n      const preparedData = prepareUserLedgerData(data);\n      setProductList(preparedData);\n    });\n  };\n  const onDeleteHandler = async (dataID) => {\n    try {\n      await deleteUserLedgerData(dataID);\n      setProductList((currentList) =>\n        currentList.filter((item) => item.id !== dataID)\n      );\n\n      SwalNotification({\n        title: getLabel(\"successLabel\"),\n        text: getLabel(\"deleteDateContent\"),\n        iconType: \"success\",\n        btnLabel: getLabel(\"okLabel\"),\n      });\n    } catch (error) {\n      console.error(\"Error deleting data:\", error);\n    }\n  };\n\n  const onFinishHandler = (values, action, table) => {\n    const { id } = values;\n    const rowData = getSubmissionData(values, user_uuid);\n\n    if (!_.isEmpty(rowData)) {\n      action === \"insert\" && onSubmit(rowData, table);\n      action === \"update\" && onUpdate(id, rowData, table);\n    }\n  };\n\n  const onSubmit = async (rowData, table) => {\n    const valid = dateValidations(rowData[0]);\n\n    if (valid) {\n      postUserLedgerData(rowData)\n        .then((response) => {\n          table.setCreatingRow(null);\n          getLedgerProductList(userID, getUserData);\n\n          SwalNotification({\n            title: getLabel(\"successLabel\"),\n            text: getLabel(\"saveDataContent\"),\n            iconType: \"success\",\n            btnLabel: getLabel(\"okLabel\"),\n          });\n        })\n        .catch((error) => console.error);\n    } else {\n      setValidSellDate(true);\n    }\n  };\n\n  const onUpdate = (dataID, updatedData, table) => {\n    const valid = dateValidations(updatedData[0]);\n\n    if (valid) {\n      updateUserLedgerData(dataID, updatedData)\n        .then((response) => {\n          getLedgerProductList(userID, getUserData);\n          table.setEditingRow(null);\n\n          SwalNotification({\n            title: getLabel(\"successLabel\"),\n            text: getLabel(\"saveDataContent\"),\n            iconType: \"success\",\n            btnLabel: getLabel(\"okLabel\"),\n          });\n        })\n        .catch((error) => {\n          console.error(\"Error updating data:\", error);\n        });\n    } else {\n      setValidSellDate(true);\n    }\n  };\n\n  return (\n    <div className=\"ledger-products-container\">\n      <LPListing\n        items={productList}\n        onSubmit={onFinishHandler}\n        onDelete={onDeleteHandler}\n        onEdit={onFinishHandler}\n        invalidSellDate={validSellDate}\n        sellDateFocused={() => setValidSellDate(false)}\n        tableAction={tableAction}\n      />\n    </div>\n  );\n};\n\nexport default LedgerProducts;\n","import {\n  supabase,\n  tableName,\n  openAIConfig,\n} from \"../../../../../config/index_supabase\";\n\nexport const fetchUserLedgerData = async (userId) => {\n  return await supabase\n    .from(tableName)\n    .select()\n    .eq(\"user_id\", userId)\n    .order(\"buy_date\", { ascending: true });\n};\n\nexport const postUserLedgerData = async (formData) => {\n  return await supabase.from(tableName).insert(formData);\n};\n\nexport const deleteUserLedgerData = async (dataID) => {\n  return await supabase.from(tableName).delete().match({ id: dataID });\n};\n\nexport const updateUserLedgerData = async (dataID, updateData) => {\n  return await supabase\n    .from(tableName)\n    .update(updateData)\n    .match({ id: dataID });\n};\n\nexport const fetchInsightsWithAI = async (formData) => {\n  const requestBody = {\n    prompt: `With json data ${formData}, ${openAIConfig.promptText}`,\n    max_tokens: Math.min(formData.length, 1000),\n  };\n\n  const response = await fetch(openAIConfig.apiUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"api-key\": openAIConfig.apiKey,\n      \"Cache-Control\": \"no-cache\",\n    },\n    body: JSON.stringify(requestBody),\n  });\n\n  const data = await response.json();\n  const text = data.choices[0].text.split(\"\\n\").map((line) => line.trim());\n\n  return text;\n};\n","export const prepareUserLedgerData = (data) => {\n  return data.map((item) => {\n    return {\n      id: item.id,\n      stockSymbol: item.stock_name,\n      buyPrice: item.buy_price,\n      buyDate: item.buy_date,\n      quantity: item.quantity,\n      sellPrice: item.sell_price,\n      sellDate: item.sell_date,\n      brokerage: item.brokerage,\n      daysHold: item.days_hold,\n      reasonToBuy: item.reason_to_buy,\n      gttEnabled: item.gtt_enabled,\n      profitLoss: item.profit_loss,\n      amount: item.Amount,\n      annualReturnGenerated: item.annual_return_generated,\n      roce: item.roce,\n    };\n  });\n};\n","import React from \"react\";\n\nconst LedgerInsights = ({ textList }) => {\n  return (\n    <div className=\"insights-list-container\">\n      <div className=\"title\">AI Generated Insights</div>\n      <ul>\n        {textList.map((text, index) =>\n          text.length ? <li key={index}>{text}</li> : null\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default LedgerInsights;\n","import React from \"react\";\n\nconst ContentWrapper = ({ children, className }) => {\n  return (\n    <div className={`content-wrapper${className ? \" \" + className : \"\"}`}>\n      {children}\n    </div>\n  );\n};\n\nexport default ContentWrapper;\n","import Modal from \"@mui/material/Modal\";\n\nimport \"./styles.css\";\n\nconst ModalContainer = ({ open, handleClose, children, title }) => {\n  return (\n    <Modal open={open} onClose={handleClose}>\n      <div className=\"ledger-modal-body\">\n        <div className=\"modal-title\">{title}</div>\n        {children}\n      </div>\n    </Modal>\n  );\n};\n\nexport default ModalContainer;\n","import _ from \"lodash\";\nimport { getLabel } from \"../../../hooks/use-labels\";\nimport { useEffect, useState } from \"react\";\nimport { fetchInsightsWithAI } from \"./LedgerProducts/lib/api\";\n\nimport LedgerHeader from \"./LedgerHeader\";\nimport LedgerProducts from \"./LedgerProducts\";\nimport LedgerInsights from \"./LedgerInsights\";\nimport ContentWrapper from \"../../../components/ContentWrapper\";\nimport ModalContainer from \"../../../components/ModalContainer\";\nimport Box from \"@mui/material/Box\";\n\nimport \"./styles.css\";\nimport { useDispatch } from \"react-redux\";\nimport { getLedgerData } from \"../../../redux/reducers/public/public-action\";\n\nlet timer = null;\n\nconst Ledgers = () => {\n  const dispatch = useDispatch();\n  const [open, setOpen] = useState(false);\n  const [tableAction, setTableAction] = useState(null);\n  const [userData, setUserData] = useState(\"\");\n  const [insightsData, setInsightsData] = useState([]);\n  const [disabled, setDisabled] = useState(true);\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!_.isEmpty(userData)) {\n      setDisabled(false);\n      dispatch(getLedgerData(userData));\n      localStorage.setItem(\"ledgerData\", JSON.stringify(userData));\n    }\n  }, [userData, dispatch]);\n\n  const getInsightsWithAI = (userData) => {\n    toggle();\n    fetchInsightsWithAI(userData)\n      .then((response) => {\n        setInsightsData(response);\n      })\n      .catch(console.error);\n  };\n\n  const handleTableAction = (table) => {\n    timer = setTimeout(() => {\n      setTableAction(table);\n    }, 100);\n  };\n\n  const toggle = () => {\n    setOpen((prev) => !prev);\n  };\n\n  const renderModal = () => {\n    if (!open) return null;\n\n    const modalProps = {\n      open,\n      handleClose: toggle,\n      title: getLabel(\"insightAILabel\"),\n    };\n\n    return (\n      <ModalContainer {...modalProps}>\n        {insightsData.length ? (\n          <LedgerInsights textList={insightsData} />\n        ) : (\n          <div className=\"center-align\">Loading...</div>\n        )}\n      </ModalContainer>\n    );\n  };\n\n  return (\n    <Box\n      sx={{\n        width: \"100%\",\n        p: 2,\n        border: \"1px solid grey\",\n        maxWidth: \"auto\",\n        margin: \"auto\",\n        overflowX: \"auto\", // Horizontal scrolling\n        overflowY: \"false\", // No vertical scrolling\n      }}\n    >\n      <ContentWrapper className=\"ledgers-container\">\n        <LedgerHeader\n          table={tableAction}\n          getInsights={() => getInsightsWithAI(userData)}\n          disabled={disabled}\n        />\n        <LedgerProducts\n          tableAction={handleTableAction}\n          getUserData={setUserData}\n        />\n        {renderModal()}\n      </ContentWrapper>\n    </Box>\n  );\n};\n\nexport default Ledgers;\n","export const defaults = {\n  brandName: \"TradingJournal.ai\",\n\n  welcomeLabel: \"Welcome:\",\n  signOutLabel: \"Sign out\",\n\n  downloadCSVLabel: \"Download CSV\",\n  saveChangesLabel: \"Save Changes\",\n  getInsightsLabel: \"Get Insights with AI\",\n  insertNewRowLabel: \"INSERT NEW ROW\",\n\n  successLabel: \"Success!\",\n  deleteDateContent: \"Data deleted successfully!\",\n  okLabel: \"OK\",\n  saveDataContent: \"Data saved successfully!\",\n  areYouSureLabel: \"Are you sure?\",\n  cannotRevertLabel: \"You won't be able to revert this!\",\n  deleteLabel: \"Yes, delete it!\",\n\n  homeLabel: \"Home\",\n  riskManagementLabel: \"Risk Management\",\n  watchListLabel: \"Watchlist\",\n  analyticsLabel: \"Analytics\",\n  KanbanLabel: \"Kanban\",\n\n  /** Header Navigation */\n  homeNavLinkLabel: \"Home\",\n  aboutUsNavLinkLabel: \"About Us\",\n  servicesNavLinkLabel: \"Services\",\n\n  /** About Us */\n  aboutUsFirstContent:\n    'Mr. Harneet Singh Kharbanda is associated with TradingJournal.ai as an Advisor and is a full-time trader in the stock market with a strong social media following of more than 200,000 people who value his expertise. Harneet is a firm believer in the importance of maintaining a trading journal and advocates strongly for good trading psychology. His best-selling book, \"Trade Like a Monk,\" emphasizes the psychological aspects of trading. Known for his straightforward approach, Harneet is a sought-after speaker and has delivered impactful talks at prestigious institutions like IIIT UNA and Masters Union. He is passionate about simplifying the complexities of trading and investment, often emphasizing the importance of discipline. Through his educational efforts, Harneet\\'s mission is to make the stock market accessible to everyone, showing that with the right tools and mindset, anyone can achieve significant success in trading.',\n\n  aboutUsSecondContent:\n    \"Sushen Sharma, the Founder of TradingJournal.ai, has a decade of experience as a trader and is also a skilled software developer. He is a staunch advocate for risk management and deeply understands the critical factors necessary to scale the business of stock trading. Through TradingJournal.ai, Sushen is dedicated to developing tools that enhance journaling practices and empower retail traders to implement a robust risk management framework effectively. Sushen believes in treating trading as a serious business, a structured discipline that requires thorough analysis and reflection. With TradingJournal.ai, Sushen's objective is to transform retail traders into well-informed, strategic market participants. By promoting a disciplined and systematic approach to trading, he combines his extensive knowledge of the markets with his programming acumen to guide traders towards higher performance and success in the competitive world of stock trading.\",\n\n  /**\n   * Pricing\n   */\n  pricingAndPlanTitle: \"Pricing & Plans\",\n  pricingAndPlanDescription:\n    \"Transparent pricing that scales with premium features and call volume.\",\n  packageTypeOne: \"Free forever\",\n  packageTypeOneLiner: \"The ultimate project kickstart\",\n  packageTypeOnePrice: \"$0\",\n  packageTypeOneDuration: \"month\",\n  packageTypeOnePaymentDuration: \"No credit card required\",\n  packageTypeOneLinkLabel: \"Try it for free\",\n  packageTypeOnePlanOffers: \"What's included:\",\n  packageTypeOnePlanList: [\n    \"10 connected accounts\",\n    \"2,000 Unified API calls\",\n    \"Unlimited Basic integrations\",\n    \"Passthrough API\",\n    \"1-day log retention\",\n    \"Modern SDKs\",\n    \"Community support\",\n  ],\n\n  packageTypeTwo: \"For Growing Traders\",\n  packageTypeTwoLiner: \"The plan to unlock more customers\",\n  packageTypeTwoPrice: \"₹59\",\n  packageTypeTwoDuration: \"month\",\n  packageTypeTwoPaymentDuration: \"Billed monthly\",\n  packageTypeTwoLinkLabel: \"Get Started\",\n  packageTypeTwoPlanOffers: \"Everything in Free, plus:\",\n  packageTypeTwoPlanList: [\n    \"Unlimited connected accounts\",\n    \"50,000 Unified API calls\",\n    \"1 Premium integration\",\n    \"Standard API pricing\",\n    \"7-day log retention\",\n    \"Onboarding Support\",\n    \"Dedicated Slack channel\",\n  ],\n\n  packageTypeThree: \"Professional Traders\",\n  packageTypeThreeLiner: \"For teams that are scaling up\",\n  packageTypeThreePrice: \"₹159\",\n  packageTypeThreeDuration: \"month\",\n  packageTypeThreePaymentDuration: \"Billed monthly\",\n  packageTypeThreeLinkLabel: \"Contact Sales\",\n  packageTypeThreePlanOffers: \"Everything in Ridiculous, plus:\",\n  packageTypeThreePlanList: [\n    \"Unlimited Unified API calls\",\n    \"Unlimited Premium integrations\",\n    \"White labeling\",\n    \"Volume API pricing\",\n    \"30-day log retention\",\n    \"Roadmap request priority\",\n    \"Dedicated account manager\",\n  ],\n\n  compareAndPlanFeatures: \"Compare plans and features\",\n  chosePlanFeatureDescription: \"Choose the plan that's right for your business\",\n  faqLabel: \"FAQs\",\n\n  tryItFreeLabel: \"Try It Free\",\n  getStartedLabel: \"Get Started\",\n  contactSalesLabel: \"Contact Sales\",\n\n  /** Payment Gateway ***/\n\n  paymentGatewayLabel: \"PhonePe Payment Gateway\",\n  payWithLabel: \"Pay with PhonePe\",\n  congratulationsLabel: \"Congratulations\",\n  successContent: \"You have subscribed for AI feature\",\n};\n","let metadata;\n\nconst getMetaLabels = (metadata) => {\n  return metadata.filter(({ type }) => type === \"LABEL\");\n};\n\nconst getMetaStyles = (metadata) => {\n  return metadata.filter(({ type }) => type === \"STYLE\");\n};\n\nexport const setMetadata = (_metadata) => {\n  metadata = {};\n  const label = getMetaLabels(_metadata);\n  const style = getMetaStyles(_metadata);\n\n  metadata = {\n    ...(label.length && { label }),\n    ...(style.length && { style }),\n  };\n\n  localStorage.setItem(\"metadata\", JSON.stringify(metadata));\n};\n\nconst getMetadata = () => {\n  if (!metadata) {\n    metadata = JSON.parse(localStorage.getItem(\"metadata\") || \"{}\");\n  }\n  return metadata;\n};\n\nexport const styles = () => {\n  return getMetadata()?.style || [];\n};\n\nexport const labels = () => {\n  return getMetadata()?.label || [];\n};\n","import { getParameter } from \"../utils/common-utils\";\nimport { defaults } from \"../utils/defaults\";\nimport { labels } from \"../utils/metadata\";\n\nexport const getLabels = (keys) => {\n  const labelsData = {};\n  const labelInformations = labels();\n\n  keys.forEach((key) => {\n    let labelInfo = getParameter(labelInformations, key);\n\n    let data = labelInfo\n      ? labelInfo.values.length === 1\n        ? labelInfo.values[0]\n        : labelInfo.values\n      : defaults[key];\n\n    labelsData[key] = data;\n  });\n\n  return labelsData;\n};\n\nexport const useLabels = (keys) => {\n  return getLabels(keys);\n};\n\nexport const getLabel = (key) => {\n  const labelData = labels();\n  const labelInfo = getParameter(labelData, key);\n\n  return labelInfo\n    ? labelInfo.values.length === 1\n      ? labelInfo.values[0]\n      : labelInfo.values\n    : defaults[key];\n};\n","import { Button } from \"@mui/material\";\nimport React from \"react\";\n\nconst LedgerButton = ({\n  type,\n  label,\n  size = \"lg\",\n  disable = false,\n  onClick,\n  htmlType = null,\n  className,\n  icon,\n  width,\n  style,\n  variant,\n  hoverType,\n}) => {\n  const { pixels, unit } = width || { pixels: null, unit: null };\n\n  const styles = {\n    width:\n      width && typeof width === \"object\" ? `${pixels}${unit}` : `${width}px`,\n    ...style,\n  };\n\n  return (\n    <Button\n      type={htmlType}\n      id={label}\n      startIcon={icon}\n      className={`${className} button-box-shadow ledger-button button-${\n        size ? size : \"default\"\n      } ${!disable ? `${type}-enabled` : `${type}-disabled`}${\n        hoverType ? \" \" + hoverType : \"\"\n      }`}\n      onClick={(e) => {\n        e.preventDefault();\n        !disable && onClick && onClick(e);\n      }}\n      style={{ ...styles }}\n      variant={variant}\n      disabled={disable}\n    >\n      {label && label}\n    </Button>\n  );\n};\n\nexport default LedgerButton;\n"],"names":["_ref","title","text","btnLabel","iconType","Swal","icon","confirmButtonText","supabase","createClient","process","openAIConfig","apiKey","apiUrl","promptText","tableName","table","getInsights","disabled","_jsxs","className","children","_jsx","LedgerButton","label","getLabel","type","variant","onClick","hoverType","size","disable","AI","setCreatingRow","AddNewRow","console","log","Download","style","marginLeft","totalPercentageRate","setProfitLoss","fieldData","quantity","sellPrice","buyPrice","toFixed","setAmountInvested","setRoce","setBrokerage","setHoldDays","buyDate","sellDate","buy","Date","sell","diffTime","Math","abs","ceil","errorMessage","validateRequired","value","length","dateValidations","buy_date","sell_date","row","openModal","Box","sx","display","gap","Tooltip","IconButton","setEditingRow","color","EditIcon","DeleteIcon","items","onSubmit","onDelete","onEdit","invalidSellDate","sellDateFocused","tableAction","errors","setErrors","useState","columnNames","setColumnNames","loading","setLoading","useEffect","_","tableColumns","onColumnFocusHandler","validationErrors","focusedColumn","arguments","undefined","preparedColumns","prepareLedgerColumns","onColumnFocus","accessorKey","header","muiEditTextFieldProps","required","error","stockSymbol","helperText","onFocus","inputProps","min","reasonToBuy","editVariant","editSelectOptions","select","gttEnabled","enableEditing","columns","useMemo","handleCreateProduct","values","newValidationErrors","product","Object","some","openDeleteConfirmModal","showCancelButton","confirmButtonColor","cancelButtonColor","then","result","isConfirmed","id","useMaterialReactTable","data","enableColumnOrdering","createDisplayMode","editDisplayMode","initialState","density","columnPinning","left","getRowId","muiTableContainerProps","border","muiTableHeadCellProps","backgroundColor","minWidth","alignContent","muiColumnActionsButtonProps","borderRight","borderRadius","muiTableBodyCellProps","muiTopToolbarProps","muiBottomToolbarProps","onActionCellChange","onCreatingRowCancel","onCreatingRowSave","_ref2","onEditingRowCancel","onEditingRowSave","_ref3","renderRowActions","_ref4","TableActions","renderTopToolbarCustomActions","_ref5","MaterialReactTable","getUserData","user_uuid","getStorageStringItem","userIdKey","productList","setProductList","userUUID","useSelector","state","public","validSellDate","setValidSellDate","userID","setUserID","getLedgerProductList","async","from","eq","userId","order","ascending","fetchUserLedgerData","JSON","stringify","preparedData","map","item","stock_name","buy_price","sell_price","brokerage","daysHold","days_hold","reason_to_buy","gtt_enabled","profitLoss","profit_loss","amount","Amount","annualReturnGenerated","annual_return_generated","roce","prepareUserLedgerData","onFinishHandler","action","rowData","getSubmissionData","parseFloat","user_id","onUpdate","insert","formData","postUserLedgerData","response","SwalNotification","catch","dataID","updatedData","updateData","update","match","updateUserLedgerData","LPListing","delete","deleteUserLedgerData","currentList","filter","textList","index","concat","open","handleClose","Modal","onClose","timer","Ledgers","dispatch","useDispatch","setOpen","setTableAction","userData","setUserData","insightsData","setInsightsData","setDisabled","clearTimeout","getLedgerData","localStorage","setItem","getInsightsWithAI","toggle","requestBody","prompt","max_tokens","fetch","method","headers","body","json","choices","split","line","trim","fetchInsightsWithAI","prev","width","p","maxWidth","margin","overflowX","overflowY","ContentWrapper","LedgerHeader","LedgerProducts","setTimeout","renderModal","modalProps","ModalContainer","LedgerInsights","defaults","brandName","welcomeLabel","signOutLabel","downloadCSVLabel","saveChangesLabel","getInsightsLabel","insertNewRowLabel","successLabel","deleteDateContent","okLabel","saveDataContent","areYouSureLabel","cannotRevertLabel","deleteLabel","homeLabel","riskManagementLabel","watchListLabel","analyticsLabel","KanbanLabel","homeNavLinkLabel","aboutUsNavLinkLabel","servicesNavLinkLabel","aboutUsFirstContent","aboutUsSecondContent","pricingAndPlanTitle","pricingAndPlanDescription","packageTypeOne","packageTypeOneLiner","packageTypeOnePrice","packageTypeOneDuration","packageTypeOnePaymentDuration","packageTypeOneLinkLabel","packageTypeOnePlanOffers","packageTypeOnePlanList","packageTypeTwo","packageTypeTwoLiner","packageTypeTwoPrice","packageTypeTwoDuration","packageTypeTwoPaymentDuration","packageTypeTwoLinkLabel","packageTypeTwoPlanOffers","packageTypeTwoPlanList","packageTypeThree","packageTypeThreeLiner","packageTypeThreePrice","packageTypeThreeDuration","packageTypeThreePaymentDuration","packageTypeThreeLinkLabel","packageTypeThreePlanOffers","packageTypeThreePlanList","compareAndPlanFeatures","chosePlanFeatureDescription","faqLabel","tryItFreeLabel","getStartedLabel","contactSalesLabel","paymentGatewayLabel","payWithLabel","congratulationsLabel","successContent","metadata","getMetadata","parse","getItem","labels","_getMetadata2","useLabels","keys","labelsData","labelInformations","forEach","key","labelInfo","getParameter","getLabels","labelData","htmlType","pixels","unit","styles","Button","startIcon","e","preventDefault"],"sourceRoot":""}